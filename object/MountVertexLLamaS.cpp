// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// be/be_codegen.cpp:733

#ifndef _TAO_IDL__TMP__MOUNTVERTEXLLAMAS_CPP_
#define _TAO_IDL__TMP__MOUNTVERTEXLLAMAS_CPP_


#include "MountVertexLLamaS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "MountVertexLLamaS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:1715

class TAO_Control_MountVertexLLama_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /alma/ACS-2014.4/TAO/ACE_wrappers/build/linux/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Control_MountVertexLLama_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Control_MountVertexLLama_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned short asso_values[] =
    {
#if defined (ACE_MVS)
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  478,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   45,
     1006,   80,  272,  478,  150,  395,   70,  350, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006,  285,   40,  148,
       10,   25, 1006,   10, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,    0,  195,    5, 1006,  140, 1006,    0,   10,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006,   99,  373,  488,  220,  111,  211,    0,
       90, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   45,
       10,  240,   45,  315, 1006,  250, 1006,  448, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006,   55,  170, 1006, 1006,
       33, 1006,  399,    0, 1006, 1006, 1006, 1006, 1006, 1006,
      308,  360,  425,  505,  380,  163,   46,  495,  263,   93,
     1006, 1006, 1006, 1006, 1006, 1006,
#else
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  308,  360,
      425,  505,  380,  163,   46,  495,  263,   93, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,   99,  373,  488,  220,  111,
      211,    0,   90, 1006,   45,   10,  240,   45,  315, 1006,
      250, 1006,  448,   55,  170, 1006, 1006,   33, 1006,  399,
        0, 1006, 1006, 1006, 1006,  478, 1006,   45, 1006,   80,
      272,  478,  150,  395,   70,  350, 1006, 1006,  285,   40,
      148,   10,   25, 1006,   10,    0,  195,    5, 1006,  140,
     1006,    0,   10, 1006, 1006, 1006, 1006, 1006,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_Control_MountVertexLLama_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 825,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 53,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 1005,
      HASH_VALUE_RANGE = 999,
      DUPLICATES = 335,
      WORDLIST_SIZE = 832
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"standby", &POA_Control::MountVertexLLama::standby_skel, 0},
      {"setTrajectory", &POA_Control::MountVertexLLama::setTrajectory_skel, 0},
      {"resetLimits", &POA_Control::MountVertexLLama::resetLimits_skel, 0},
      {"GET_TIME_PULSE_MISSING", &POA_Control::MountVertexLLama::GET_TIME_PULSE_MISSING_skel, 0},
      {"GET_SELFTEST_RSP_RUNNING", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_RUNNING_skel, 0},
      {"useTemperatureSensors", &POA_Control::MountVertexLLama::useTemperatureSensors_skel, 0},
      {"releaseSubdevices", &POA_Control::MountVertexLLama::releaseSubdevices_skel, 0},
      {"setSubdeviceError", &POA_Control::MountVertexLLama::setSubdeviceError_skel, 0},
      {"usingTemperatureSensors", &POA_Control::MountVertexLLama::usingTemperatureSensors_skel, 0},
      {"GET_ALS_STATUS_AZ_LUB_ONGOING", &POA_Control::MountVertexLLama::GET_ALS_STATUS_AZ_LUB_ONGOING_skel, 0},
      {"GET_ALS_STATUS_EL_LUB_ONGOING", &POA_Control::MountVertexLLama::GET_ALS_STATUS_EL_LUB_ONGOING_skel, 0},
      {"openShutter", &POA_Control::MountVertexLLama::openShutter_skel, 0},
      {"GET_STAIRWAY_INTERLOCK", &POA_Control::MountVertexLLama::GET_STAIRWAY_INTERLOCK_skel, 0},
      {"GET_HANDLING_INTERLOCK", &POA_Control::MountVertexLLama::GET_HANDLING_INTERLOCK_skel, 0},
      {"setSubreflectorPositionToleranceZ", &POA_Control::MountVertexLLama::setSubreflectorPositionToleranceZ_skel, 0},
      {"GET_AZ_GEARBOX_1_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_AZ_GEARBOX_1_OIL_LEVEL_WARNING_skel, 0},
      {"GET_EL_GEARBOX_4_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_EL_GEARBOX_4_OIL_LEVEL_WARNING_skel, 0},
      {"GET_EL_GEARBOX_3_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_EL_GEARBOX_3_OIL_LEVEL_WARNING_skel, 0},
      {"GET_EL_GEARBOX_2_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_EL_GEARBOX_2_OIL_LEVEL_WARNING_skel, 0},
      {"GET_EL_GEARBOX_1_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_EL_GEARBOX_1_OIL_LEVEL_WARNING_skel, 0},
      {"GET_AZ_GEARBOX_2_OIL_LEVEL_WARNING", &POA_Control::MountVertexLLama::GET_AZ_GEARBOX_2_OIL_LEVEL_WARNING_skel, 0},
      {"GET_SINGLE_PHASE_INTERLOCK", &POA_Control::MountVertexLLama::GET_SINGLE_PHASE_INTERLOCK_skel, 0},
      {"GET_AZ_INSANE_VELOCITY_FEEDBACK", &POA_Control::MountVertexLLama::GET_AZ_INSANE_VELOCITY_FEEDBACK_skel, 0},
      {"GET_EL_INSANE_VELOCITY_FEEDBACK", &POA_Control::MountVertexLLama::GET_EL_INSANE_VELOCITY_FEEDBACK_skel, 0},
      {"GET_AZ_LIMIT_CW", &POA_Control::MountVertexLLama::GET_AZ_LIMIT_CW_skel, 0},
      {"GET_AZ_LIMIT_CCW", &POA_Control::MountVertexLLama::GET_AZ_LIMIT_CCW_skel, 0},
      {"GET_AZ_PRELIMIT_CW", &POA_Control::MountVertexLLama::GET_AZ_PRELIMIT_CW_skel, 0},
      {"GET_AZ_PRELIMIT_CCW", &POA_Control::MountVertexLLama::GET_AZ_PRELIMIT_CCW_skel, 0},
      {"GET_UPS1_INVERTER_SW", &POA_Control::MountVertexLLama::GET_UPS1_INVERTER_SW_skel, 0},
      {"GET_UPS2_INVERTER_SW", &POA_Control::MountVertexLLama::GET_UPS2_INVERTER_SW_skel, 0},
      {"autonomous", &POA_Control::MountVertexLLama::autonomous_skel, 0},
      {"GET_AZ_TRAJ", &POA_Control::MountVertexLLama::GET_AZ_TRAJ_skel, 0},
      {"GET_EL_TRAJ", &POA_Control::MountVertexLLama::GET_EL_TRAJ_skel, 0},
      {"GET_AZ_EMERGENCY_LIMIT_CW", &POA_Control::MountVertexLLama::GET_AZ_EMERGENCY_LIMIT_CW_skel, 0},
      {"GET_AZ_EMERGENCY_LIMIT_CCW", &POA_Control::MountVertexLLama::GET_AZ_EMERGENCY_LIMIT_CCW_skel, 0},
      {"GET_METR_TEMPS_06", &POA_Control::MountVertexLLama::GET_METR_TEMPS_06_skel, 0},
      {"GET_METR_TEMPS_16", &POA_Control::MountVertexLLama::GET_METR_TEMPS_16_skel, 0},
      {"GET_METR_DELTAS_SPEM", &POA_Control::MountVertexLLama::GET_METR_DELTAS_SPEM_skel, 0},
      {"GET_AZ_SERVO_COEFF_6", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_6_skel, 0},
      {"GET_EL_SERVO_COEFF_6", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_6_skel, 0},
      {"GET_PT_MODEL_COEFF_06", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_06_skel, 0},
      {"GET_NUM_TRANS", &POA_Control::MountVertexLLama::GET_NUM_TRANS_skel, 0},
      {"GET_UPS_FREQS", &POA_Control::MountVertexLLama::GET_UPS_FREQS_skel, 0},
      {"GET_AC_STATUS", &POA_Control::MountVertexLLama::GET_AC_STATUS_skel, 0},
      {"GET_EL_STATUS", &POA_Control::MountVertexLLama::GET_EL_STATUS_skel, 0},
      {"GET_AZ_STATUS", &POA_Control::MountVertexLLama::GET_AZ_STATUS_skel, 0},
      {"GET_IP_ADDRESS", &POA_Control::MountVertexLLama::GET_IP_ADDRESS_skel, 0},
      {"GET_UPS2_FREQS", &POA_Control::MountVertexLLama::GET_UPS2_FREQS_skel, 0},
      {"GET_ALS_STATUS", &POA_Control::MountVertexLLama::GET_ALS_STATUS_skel, 0},
      {"GET_UPS_ALARMS", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_skel, 0},
      {"GET_METR_DELTAS", &POA_Control::MountVertexLLama::GET_METR_DELTAS_skel, 0},
      {"GET_UPS2_ALARMS", &POA_Control::MountVertexLLama::GET_UPS2_ALARMS_skel, 0},
      {"GET_EL_TRAJ_POS", &POA_Control::MountVertexLLama::GET_EL_TRAJ_POS_skel, 0},
      {"GET_AZ_TRAJ_POS", &POA_Control::MountVertexLLama::GET_AZ_TRAJ_POS_skel, 0},
      {"GET_NODE_ADDRESS", &POA_Control::MountVertexLLama::GET_NODE_ADDRESS_skel, 0},
      {"GET_OTHER_STATUS", &POA_Control::MountVertexLLama::GET_OTHER_STATUS_skel, 0},
      {"GET_POWER_STATUS", &POA_Control::MountVertexLLama::GET_POWER_STATUS_skel, 0},
      {"GET_BASE_ADDRESS", &POA_Control::MountVertexLLama::GET_BASE_ADDRESS_skel, 0},
      {"GET_ANTENNA_TEMPS", &POA_Control::MountVertexLLama::GET_ANTENNA_TEMPS_skel, 0},
      {"GET_SUBREF_LIMITS", &POA_Control::MountVertexLLama::GET_SUBREF_LIMITS_skel, 0},
      {"GET_SUBREF_STATUS", &POA_Control::MountVertexLLama::GET_SUBREF_STATUS_skel, 0},
      {"GET_SYSTEM_STATUS", &POA_Control::MountVertexLLama::GET_SYSTEM_STATUS_skel, 0},
      {"GET_EL_ENC_STATUS", &POA_Control::MountVertexLLama::GET_EL_ENC_STATUS_skel, 0},
      {"GET_AZ_ENC_STATUS", &POA_Control::MountVertexLLama::GET_AZ_ENC_STATUS_skel, 0},
      {"GET_EL_MOTOR_TEMPS", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TEMPS_skel, 0},
      {"GET_AZ_MOTOR_TEMPS", &POA_Control::MountVertexLLama::GET_AZ_MOTOR_TEMPS_skel, 0},
      {"GET_UPS_OUTPUT_VOLTS", &POA_Control::MountVertexLLama::GET_UPS_OUTPUT_VOLTS_skel, 0},
      {"GET_UPS_BYPASS_VOLTS", &POA_Control::MountVertexLLama::GET_UPS_BYPASS_VOLTS_skel, 0},
      {"GET_METR_EQUIP_STATUS", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_skel, 0},
      {"GET_UPS2_OUTPUT_VOLTS", &POA_Control::MountVertexLLama::GET_UPS2_OUTPUT_VOLTS_skel, 0},
      {"GET_UPS2_BYPASS_VOLTS", &POA_Control::MountVertexLLama::GET_UPS2_BYPASS_VOLTS_skel, 0},
      {"GET_AZ_MOTOR_CURRENTS", &POA_Control::MountVertexLLama::GET_AZ_MOTOR_CURRENTS_skel, 0},
      {"GET_EL_MOTOR_CURRENTS", &POA_Control::MountVertexLLama::GET_EL_MOTOR_CURRENTS_skel, 0},
      {"GET_UPS_BATTERY_STATUS", &POA_Control::MountVertexLLama::GET_UPS_BATTERY_STATUS_skel, 0},
      {"GET_UPS_INVERTER_VOLTS", &POA_Control::MountVertexLLama::GET_UPS_INVERTER_VOLTS_skel, 0},
      {"GET_UPS2_BATTERY_STATUS", &POA_Control::MountVertexLLama::GET_UPS2_BATTERY_STATUS_skel, 0},
      {"GET_UPS2_INVERTER_VOLTS", &POA_Control::MountVertexLLama::GET_UPS2_INVERTER_VOLTS_skel, 0},
      {"GET_AZ_SPEED_ZERO_STATUS", &POA_Control::MountVertexLLama::GET_AZ_SPEED_ZERO_STATUS_skel, 0},
      {"GET_EL_SPEED_ZERO_STATUS", &POA_Control::MountVertexLLama::GET_EL_SPEED_ZERO_STATUS_skel, 0},
      {"GET_AIR_CONDITIONING_SYSTEM_A_ALARM", &POA_Control::MountVertexLLama::GET_AIR_CONDITIONING_SYSTEM_A_ALARM_skel, 0},
      {"GET_AIR_CONDITIONING_SYSTEM_B_ALARM", &POA_Control::MountVertexLLama::GET_AIR_CONDITIONING_SYSTEM_B_ALARM_skel, 0},
      {"GET_SUBREF_ABS_POSN_X_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_ABS_POSN_X_AXIS_skel, 0},
      {"GET_EL_AXIS_IN_STOP_STATUS", &POA_Control::MountVertexLLama::GET_EL_AXIS_IN_STOP_STATUS_skel, 0},
      {"GET_AZ_AXIS_IN_STOP_STATUS", &POA_Control::MountVertexLLama::GET_AZ_AXIS_IN_STOP_STATUS_skel, 0},
      {"GET_SUBREF_ABS_POSN_Z_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_ABS_POSN_Z_AXIS_skel, 0},
      {"GET_SUBREF_ABS_POSN_Y_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_ABS_POSN_Y_AXIS_skel, 0},
      {"GET_AZ_STOW_POSITION_STATUS", &POA_Control::MountVertexLLama::GET_AZ_STOW_POSITION_STATUS_skel, 0},
      {"GET_EL_STOW_POSITION_STATUS", &POA_Control::MountVertexLLama::GET_EL_STOW_POSITION_STATUS_skel, 0},
      {"GET_SUBREF_DELTA_POSN_X_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_DELTA_POSN_X_AXIS_skel, 0},
      {"GET_EMERGENCY_STOP_AZ_DRIVES", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_AZ_DRIVES_skel, 0},
      {"GET_SUBREF_DELTA_POSN_Z_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_DELTA_POSN_Z_AXIS_skel, 0},
      {"GET_SUBREF_DELTA_POSN_Y_AXIS", &POA_Control::MountVertexLLama::GET_SUBREF_DELTA_POSN_Y_AXIS_skel, 0},
      {"GET_AZ_AUX_MOTOR_1_OFF_STATUS", &POA_Control::MountVertexLLama::GET_AZ_AUX_MOTOR_1_OFF_STATUS_skel, 0},
      {"GET_ALS_STATUS_EL_LUB_SUCCESS", &POA_Control::MountVertexLLama::GET_ALS_STATUS_EL_LUB_SUCCESS_skel, 0},
      {"GET_ALS_STATUS_AZ_LUB_SUCCESS", &POA_Control::MountVertexLLama::GET_ALS_STATUS_AZ_LUB_SUCCESS_skel, 0},
      {"GET_AZ_AUX_MOTOR_2_OFF_STATUS", &POA_Control::MountVertexLLama::GET_AZ_AUX_MOTOR_2_OFF_STATUS_skel, 0},
      {"GET_MAIN_SW_POS_ANTENNABASE_PS", &POA_Control::MountVertexLLama::GET_MAIN_SW_POS_ANTENNABASE_PS_skel, 0},
      {"GET_EL_AUX_MOTOR_1_2_OFF_STATUS", &POA_Control::MountVertexLLama::GET_EL_AUX_MOTOR_1_2_OFF_STATUS_skel, 0},
      {"GET_COMMUNICATION_ERROR_ACU_UPS", &POA_Control::MountVertexLLama::GET_COMMUNICATION_ERROR_ACU_UPS_skel, 0},
      {"GET_EL_AUX_MOTOR_3_4_OFF_STATUS", &POA_Control::MountVertexLLama::GET_EL_AUX_MOTOR_3_4_OFF_STATUS_skel, 0},
      {"GET_MAIN_SW_POS_TRANSPORTABLE_PS", &POA_Control::MountVertexLLama::GET_MAIN_SW_POS_TRANSPORTABLE_PS_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_6", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_6_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_6", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_6_skel, 0},
      {"GET_CIRCUIT_BREAKER_NON_CRITICAL_BUS", &POA_Control::MountVertexLLama::GET_CIRCUIT_BREAKER_NON_CRITICAL_BUS_skel, 0},
      {"GET_NOMINAL_BATTERY_AUTOMOMY_MINUTES", &POA_Control::MountVertexLLama::GET_NOMINAL_BATTERY_AUTOMOMY_MINUTES_skel, 0},
      {"createSubdevices", &POA_Control::MountVertexLLama::createSubdevices_skel, 0},
      {"GET_CIRCUIT_BREAKER_CRITICAL_CRYOGENIC_BUS", &POA_Control::MountVertexLLama::GET_CIRCUIT_BREAKER_CRITICAL_CRYOGENIC_BUS_skel, 0},
      {"GET_CIRCUIT_BREAKER_CRITICAL_ELECTRONIC_BUS", &POA_Control::MountVertexLLama::GET_CIRCUIT_BREAKER_CRITICAL_ELECTRONIC_BUS_skel, 0},
      {"hwStop", &POA_Control::MountVertexLLama::hwStop_skel, 0},
      {"closeShutter", &POA_Control::MountVertexLLama::closeShutter_skel, 0},
      {"GET_SAFE_SWITCH", &POA_Control::MountVertexLLama::GET_SAFE_SWITCH_skel, 0},
      {"GET_METR_DELTAPATH", &POA_Control::MountVertexLLama::GET_METR_DELTAPATH_skel, 0},
      {"clearSubdeviceError", &POA_Control::MountVertexLLama::clearSubdeviceError_skel, 0},
      {"GET_METR_TEMPS_09", &POA_Control::MountVertexLLama::GET_METR_TEMPS_09_skel, 0},
      {"GET_METR_TEMPS_19", &POA_Control::MountVertexLLama::GET_METR_TEMPS_19_skel, 0},
      {"GET_AZ_SERVO_COEFF_9", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_9_skel, 0},
      {"GET_EL_SERVO_COEFF_9", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_9_skel, 0},
      {"GET_PT_MODEL_COEFF_09", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_09_skel, 0},
      {"GET_METR_TEMPS_0A", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0A_skel, 0},
      {"GET_METR_TEMPS_1A", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1A_skel, 0},
      {"SET_ALS", &POA_Control::MountVertexLLama::SET_ALS_skel, 0},
      {"GET_AZ_SERVO_COEFF_A", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_A_skel, 0},
      {"GET_EL_SERVO_COEFF_A", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_A_skel, 0},
      {"GET_PT_MODEL_COEFF_0A", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0A_skel, 0},
      {"SET_AZ_SERVO_COEFF_6", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_6_skel, 0},
      {"SET_EL_SERVO_COEFF_6", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_6_skel, 0},
      {"SET_PT_MODEL_COEFF_06", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_06_skel, 0},
      {"GET_AZ_BRAKE", &POA_Control::MountVertexLLama::GET_AZ_BRAKE_skel, 0},
      {"GET_EL_BRAKE", &POA_Control::MountVertexLLama::GET_EL_BRAKE_skel, 0},
      {"GET_METR_MODE", &POA_Control::MountVertexLLama::GET_METR_MODE_skel, 0},
      {"GET_UPS_ALARMS_MANUAL_BYPASS_SWITCH", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_MANUAL_BYPASS_SWITCH_skel, 0},
      {"GET_ACCESS_MODE", &POA_Control::MountVertexLLama::GET_ACCESS_MODE_skel, 0},
      {"GET_EL_AUX_MODE", &POA_Control::MountVertexLLama::GET_EL_AUX_MODE_skel, 0},
      {"GET_AZ_AUX_MODE", &POA_Control::MountVertexLLama::GET_AZ_AUX_MODE_skel, 0},
      {"GET_AZIMUTH_MODE", &POA_Control::MountVertexLLama::GET_AZIMUTH_MODE_skel, 0},
      {"GET_METR_TEMPS_0E", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0E_skel, 0},
      {"GET_METR_TEMPS_1E", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1E_skel, 0},
      {"GET_POWER_FAILURE", &POA_Control::MountVertexLLama::GET_POWER_FAILURE_skel, 0},
      {"GET_ELEVATION_MODE", &POA_Control::MountVertexLLama::GET_ELEVATION_MODE_skel, 0},
      {"GET_IDLE_STOW_TIME", &POA_Control::MountVertexLLama::GET_IDLE_STOW_TIME_skel, 0},
      {"GET_BREAKER_FAILURE", &POA_Control::MountVertexLLama::GET_BREAKER_FAILURE_skel, 0},
      {"GET_AZ_MOTOR_TORQUE", &POA_Control::MountVertexLLama::GET_AZ_MOTOR_TORQUE_skel, 0},
      {"GET_EL_MOTOR_TORQUE", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TORQUE_skel, 0},
      {"GET_ACU_FAN_FAILURE", &POA_Control::MountVertexLLama::GET_ACU_FAN_FAILURE_skel, 0},
      {"GET_AZ_SERVO_COEFF_E", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_E_skel, 0},
      {"GET_LINE_24V_FAILURE", &POA_Control::MountVertexLLama::GET_LINE_24V_FAILURE_skel, 0},
      {"GET_EL_SERVO_FAILURE", &POA_Control::MountVertexLLama::GET_EL_SERVO_FAILURE_skel, 0},
      {"GET_AZ_SERVO_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_SERVO_FAILURE_skel, 0},
      {"GET_EL_SERVO_COEFF_E", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_E_skel, 0},
      {"GET_PT_MODEL_COEFF_0E", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0E_skel, 0},
      {"GET_SELFTEST_ERR_VALUE", &POA_Control::MountVertexLLama::GET_SELFTEST_ERR_VALUE_skel, 0},
      {"GET_EL_BRAKE_4_FAILURE", &POA_Control::MountVertexLLama::GET_EL_BRAKE_4_FAILURE_skel, 0},
      {"GET_EL_BRAKE_3_FAILURE", &POA_Control::MountVertexLLama::GET_EL_BRAKE_3_FAILURE_skel, 0},
      {"GET_EL_BRAKE_2_FAILURE", &POA_Control::MountVertexLLama::GET_EL_BRAKE_2_FAILURE_skel, 0},
      {"GET_EL_BRAKE_1_FAILURE", &POA_Control::MountVertexLLama::GET_EL_BRAKE_1_FAILURE_skel, 0},
      {"GET_EL_ENCODER_FAILURE", &POA_Control::MountVertexLLama::GET_EL_ENCODER_FAILURE_skel, 0},
      {"GET_AZ_BRAKE_2_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_BRAKE_2_FAILURE_skel, 0},
      {"GET_AZ_BRAKE_1_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_BRAKE_1_FAILURE_skel, 0},
      {"GET_AZ_ENCODER_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_ENCODER_FAILURE_skel, 0},
      {"GET_AZ_IMMOBILE_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_IMMOBILE_FAILURE_skel, 0},
      {"GET_UPS_BATTERY_VOLTAGE", &POA_Control::MountVertexLLama::GET_UPS_BATTERY_VOLTAGE_skel, 0},
      {"GET_ACU_BOOTING_FAILURE", &POA_Control::MountVertexLLama::GET_ACU_BOOTING_FAILURE_skel, 0},
      {"GET_EL_IMMOBILE_FAILURE", &POA_Control::MountVertexLLama::GET_EL_IMMOBILE_FAILURE_skel, 0},
      {"GET_NORMAL_OPERATING_MODE", &POA_Control::MountVertexLLama::GET_NORMAL_OPERATING_MODE_skel, 0},
      {"GET_AZ_AMPLIFIER_1_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_AMPLIFIER_1_FAILURE_skel, 0},
      {"GET_EL_AMPLIFIER_4_FAILURE", &POA_Control::MountVertexLLama::GET_EL_AMPLIFIER_4_FAILURE_skel, 0},
      {"GET_EL_AMPLIFIER_3_FAILURE", &POA_Control::MountVertexLLama::GET_EL_AMPLIFIER_3_FAILURE_skel, 0},
      {"GET_EL_AMPLIFIER_2_FAILURE", &POA_Control::MountVertexLLama::GET_EL_AMPLIFIER_2_FAILURE_skel, 0},
      {"GET_EL_AMPLIFIER_1_FAILURE", &POA_Control::MountVertexLLama::GET_EL_AMPLIFIER_1_FAILURE_skel, 0},
      {"GET_AZ_AMPLIFIER_2_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_AMPLIFIER_2_FAILURE_skel, 0},
      {"GET_UPS_ALARMS_MAIN_FAILURE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_MAIN_FAILURE_skel, 0},
      {"GET_UPS_ALARMS_THERMAL_IMAGE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_THERMAL_IMAGE_skel, 0},
      {"GET_ALS_STATUS_EL_LOW_GREASE", &POA_Control::MountVertexLLama::GET_ALS_STATUS_EL_LOW_GREASE_skel, 0},
      {"GET_ALS_STATUS_AZ_LOW_GREASE", &POA_Control::MountVertexLLama::GET_ALS_STATUS_AZ_LOW_GREASE_skel, 0},
      {"GET_AIR_CONDITIONING_AUTO_MODE", &POA_Control::MountVertexLLama::GET_AIR_CONDITIONING_AUTO_MODE_skel, 0},
      {"GET_SUBREF_ACT_6_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_6_DOES_NOT_MOVE_skel, 0},
      {"GET_SUBREF_ACT_5_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_5_DOES_NOT_MOVE_skel, 0},
      {"GET_SUBREF_ACT_4_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_4_DOES_NOT_MOVE_skel, 0},
      {"GET_SUBREF_ACT_3_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_3_DOES_NOT_MOVE_skel, 0},
      {"GET_SUBREF_ACT_2_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_2_DOES_NOT_MOVE_skel, 0},
      {"GET_SUBREF_ACT_1_DOES_NOT_MOVE", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_1_DOES_NOT_MOVE_skel, 0},
      {"GET_UPS_ALARMS_INVERTER_VOLTAGE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_INVERTER_VOLTAGE_skel, 0},
      {"GET_SUBREF_HEXAPOD_IN_INIT_MODE", &POA_Control::MountVertexLLama::GET_SUBREF_HEXAPOD_IN_INIT_MODE_skel, 0},
      {"GET_UPS_ALARMS_HIGH_TEMPERATURE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_HIGH_TEMPERATURE_skel, 0},
      {"GET_AZ_SERVO_OSCILLATION_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_SERVO_OSCILLATION_FAILURE_skel, 0},
      {"GET_UPS_ALARMS_RECTIFIER_FAILURE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_RECTIFIER_FAILURE_skel, 0},
      {"GET_AIR_CONDITIONING_MANUAL_MODE", &POA_Control::MountVertexLLama::GET_AIR_CONDITIONING_MANUAL_MODE_skel, 0},
      {"GET_EL_AUXILIARY_ENCODER_FAILURE", &POA_Control::MountVertexLLama::GET_EL_AUXILIARY_ENCODER_FAILURE_skel, 0},
      {"GET_EL_SERVO_OSCILLATION_FAILURE", &POA_Control::MountVertexLLama::GET_EL_SERVO_OSCILLATION_FAILURE_skel, 0},
      {"GET_AZ_AUXILIARY_ENCODER_FAILURE", &POA_Control::MountVertexLLama::GET_AZ_AUXILIARY_ENCODER_FAILURE_skel, 0},
      {"GET_FAST_SWITCHING_OPERATING_MODE", &POA_Control::MountVertexLLama::GET_FAST_SWITCHING_OPERATING_MODE_skel, 0},
      {"GET_UPS_ALARMS_UPS_PHASE_SEQUENCE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_UPS_PHASE_SEQUENCE_skel, 0},
      {"GET_SURVIVAL_STOW_DT_MISSING_PULSE", &POA_Control::MountVertexLLama::GET_SURVIVAL_STOW_DT_MISSING_PULSE_skel, 0},
      {"GET_AUTO_LUBRICATION_SYSTEM_FAILURE", &POA_Control::MountVertexLLama::GET_AUTO_LUBRICATION_SYSTEM_FAILURE_skel, 0},
      {"GET_ALS_STATUS_AZ_INSUFFICIENT_GREASE", &POA_Control::MountVertexLLama::GET_ALS_STATUS_AZ_INSUFFICIENT_GREASE_skel, 0},
      {"GET_SUBREF_DRIVE_POWER_SUPPLY_FAILURE", &POA_Control::MountVertexLLama::GET_SUBREF_DRIVE_POWER_SUPPLY_FAILURE_skel, 0},
      {"GET_ALS_STATUS_EL_INSUFFICIENT_GREASE", &POA_Control::MountVertexLLama::GET_ALS_STATUS_EL_INSUFFICIENT_GREASE_skel, 0},
      {"GET_EMERGENCY_STOP_INSIDE_ANTENNA_BASE", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_INSIDE_ANTENNA_BASE_skel, 0},
      {"GET_UPS_ALARMS_RECTIFIER_OUTPUT_VOLTAGE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_RECTIFIER_OUTPUT_VOLTAGE_skel, 0},
      {"GET_NOMINAL_BATTERY_AUTONOMY_PERCENTAGE", &POA_Control::MountVertexLLama::GET_NOMINAL_BATTERY_AUTONOMY_PERCENTAGE_skel, 0},
      {"GET_UPS_ALARMS_EMERGENCY_BYPASS_INACTIVE", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_EMERGENCY_BYPASS_INACTIVE_skel, 0},
      {"survivalStow", &POA_Control::MountVertexLLama::survivalStow_skel, 0},
      {"clearDeviceCommunicationErrorAlarm", &POA_Control::MountVertexLLama::clearDeviceCommunicationErrorAlarm_skel, 0},
      {"shutdown", &POA_Control::MountVertexLLama::shutdown_skel, 0},
      {"hwDiagnostic", &POA_Control::MountVertexLLama::hwDiagnostic_skel, 0},
      {"flushTrajectory", &POA_Control::MountVertexLLama::flushTrajectory_skel, 0},
      {"setMinimumElevation", &POA_Control::MountVertexLLama::setMinimumElevation_skel, 0},
      {"SET_AZ_SERVO_COEFF_9", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_9_skel, 0},
      {"SET_EL_SERVO_COEFF_9", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_9_skel, 0},
      {"SET_PT_MODEL_COEFF_09", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_09_skel, 0},
      {"setSubreflectorPosition", &POA_Control::MountVertexLLama::setSubreflectorPosition_skel, 0},
      {"setSubreflectorRotation", &POA_Control::MountVertexLLama::setSubreflectorRotation_skel, 0},
      {"SET_AZ_SERVO_COEFF_A", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_A_skel, 0},
      {"SET_EL_SERVO_COEFF_A", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_A_skel, 0},
      {"SET_PT_MODEL_COEFF_0A", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0A_skel, 0},
      {"reportFocusPosition", &POA_Control::MountVertexLLama::reportFocusPosition_skel, 0},
      {"SET_AZ_BRAKE", &POA_Control::MountVertexLLama::SET_AZ_BRAKE_skel, 0},
      {"SET_EL_BRAKE", &POA_Control::MountVertexLLama::SET_EL_BRAKE_skel, 0},
      {"SET_METR_MODE", &POA_Control::MountVertexLLama::SET_METR_MODE_skel, 0},
      {"GET_METR_TEMPS_05", &POA_Control::MountVertexLLama::GET_METR_TEMPS_05_skel, 0},
      {"GET_METR_TEMPS_15", &POA_Control::MountVertexLLama::GET_METR_TEMPS_15_skel, 0},
      {"GET_AZ_SERVO_COEFF_5", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_5_skel, 0},
      {"GET_EL_SERVO_COEFF_5", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_5_skel, 0},
      {"GET_PT_MODEL_COEFF_05", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_05_skel, 0},
      {"SET_IDLE_STOW_TIME", &POA_Control::MountVertexLLama::SET_IDLE_STOW_TIME_skel, 0},
      {"SET_AZ_SERVO_COEFF_E", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_E_skel, 0},
      {"SET_EL_SERVO_COEFF_E", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_E_skel, 0},
      {"SET_PT_MODEL_COEFF_0E", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0E_skel, 0},
      {"GET_SUBREF_CORR_ROT", &POA_Control::MountVertexLLama::GET_SUBREF_CORR_ROT_skel, 0},
      {"GET_AZ_BREAKER_FAULT", &POA_Control::MountVertexLLama::GET_AZ_BREAKER_FAULT_skel, 0},
      {"GET_SUBREF_DELTA_ROT", &POA_Control::MountVertexLLama::GET_SUBREF_DELTA_ROT_skel, 0},
      {"GET_METR_DELTAS_TILT", &POA_Control::MountVertexLLama::GET_METR_DELTAS_TILT_skel, 0},
      {"GET_AZ_ENCODER_OFFSET", &POA_Control::MountVertexLLama::GET_AZ_ENCODER_OFFSET_skel, 0},
      {"GET_EL_ENCODER_OFFSET", &POA_Control::MountVertexLLama::GET_EL_ENCODER_OFFSET_skel, 0},
      {"GET_UPS_OUTPUT_CURRENT", &POA_Control::MountVertexLLama::GET_UPS_OUTPUT_CURRENT_skel, 0},
      {"GET_UPS_BATTERY_OUTPUT", &POA_Control::MountVertexLLama::GET_UPS_BATTERY_OUTPUT_skel, 0},
      {"GET_EL_OVERSPEED_FAULT", &POA_Control::MountVertexLLama::GET_EL_OVERSPEED_FAULT_skel, 0},
      {"GET_AZ_OVERSPEED_FAULT", &POA_Control::MountVertexLLama::GET_AZ_OVERSPEED_FAULT_skel, 0},
      {"GET_UPS_BATTERY_CURRENT", &POA_Control::MountVertexLLama::GET_UPS_BATTERY_CURRENT_skel, 0},
      {"GET_UPS2_OUTPUT_CURRENT", &POA_Control::MountVertexLLama::GET_UPS2_OUTPUT_CURRENT_skel, 0},
      {"GET_UPS2_BATTERY_OUTPUT", &POA_Control::MountVertexLLama::GET_UPS2_BATTERY_OUTPUT_skel, 0},
      {"GET_UPS_ALARMS_PLL_FAULT", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_PLL_FAULT_skel, 0},
      {"maintenanceStow", &POA_Control::MountVertexLLama::maintenanceStow_skel, 0},
      {"GET_EMERGENCY_STOP_CABINET", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_CABINET_skel, 0},
      {"GET_SUBREF_ROTATION_Y_TILT", &POA_Control::MountVertexLLama::GET_SUBREF_ROTATION_Y_TILT_skel, 0},
      {"GET_SUBREF_CORR_ROT_Y_TILT", &POA_Control::MountVertexLLama::GET_SUBREF_CORR_ROT_Y_TILT_skel, 0},
      {"GET_UPS_ALARMS_BATTERY_TEST", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BATTERY_TEST_skel, 0},
      {"GET_SL_ACT_6_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_6_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_5_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_5_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_4_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_4_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_3_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_3_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_2_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_2_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_1_POSITIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_1_POSITIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_6_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_6_NEGATIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_5_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_5_NEGATIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_4_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_4_NEGATIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_3_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_3_NEGATIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_2_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_2_NEGATIVE_LIMIT_skel, 0},
      {"GET_SL_ACT_1_NEGATIVE_LIMIT", &POA_Control::MountVertexLLama::GET_SL_ACT_1_NEGATIVE_LIMIT_skel, 0},
      {"GET_SELFTEST_RSP_ERROR_COUNT", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_ERROR_COUNT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_Z_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_Z_LIMIT_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_Z_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_Z_LIMIT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_Y_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_Y_LIMIT_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_Y_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_Y_LIMIT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_X_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_X_LIMIT_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_X_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_X_LIMIT_skel, 0},
      {"GET_UPS_ALARMS_SHORT_CIRCUIT", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_SHORT_CIRCUIT_skel, 0},
      {"GET_UPS_ALARMS_BATTERY_FAULT", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BATTERY_FAULT_skel, 0},
      {"GET_SELFTEST_RSP_FAILED_COUNT", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_FAILED_COUNT_skel, 0},
      {"GET_SELFTEST_ERR_FAILED_COUNT", &POA_Control::MountVertexLLama::GET_SELFTEST_ERR_FAILED_COUNT_skel, 0},
      {"monitoringOn", &POA_Control::MountVertexLLama::monitoringOn_skel, 0},
      {"monitoringOff", &POA_Control::MountVertexLLama::monitoringOff_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_THETA_X_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_THETA_X_LIMIT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_THETA_Z_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_THETA_Z_LIMIT_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_THETA_Z_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_THETA_Z_LIMIT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_THETA_Y_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_THETA_Y_LIMIT_skel, 0},
      {"GET_SL_HEXA_NEGATIVE_THETA_Y_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_NEGATIVE_THETA_Y_LIMIT_skel, 0},
      {"GET_SL_HEXA_POSITIVE_THETA_X_LIMIT", &POA_Control::MountVertexLLama::GET_SL_HEXA_POSITIVE_THETA_X_LIMIT_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_5", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_5_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_5", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_5_skel, 0},
      {"GET_AZ_SECOND_EMERGENCY_LIMIT_CW_LIMIT", &POA_Control::MountVertexLLama::GET_AZ_SECOND_EMERGENCY_LIMIT_CW_LIMIT_skel, 0},
      {"GET_EL_SECOND_EMERGENCY_LIMIT_UP_LIMIT", &POA_Control::MountVertexLLama::GET_EL_SECOND_EMERGENCY_LIMIT_UP_LIMIT_skel, 0},
      {"GET_AZ_SECOND_EMERGENCY_LIMIT_CCW_LIMIT", &POA_Control::MountVertexLLama::GET_AZ_SECOND_EMERGENCY_LIMIT_CCW_LIMIT_skel, 0},
      {"GET_EL_SECOND_EMERGENCY_LIMIT_DOWN_LIMIT", &POA_Control::MountVertexLLama::GET_EL_SECOND_EMERGENCY_LIMIT_DOWN_LIMIT_skel, 0},
      {"GET_EMERGENCY_STOP_PORTABLE_CONTROL_UNIT", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_PORTABLE_CONTROL_UNIT_skel, 0},
      {"avoidCLOUDSATRegion", &POA_Control::MountVertexLLama::avoidCLOUDSATRegion_skel, 0},
      {"setFocusModelCoefficient", &POA_Control::MountVertexLLama::setFocusModelCoefficient_skel, 0},
      {"setPointingModelCoefficient", &POA_Control::MountVertexLLama::setPointingModelCoefficient_skel, 0},
      {"setSubreflectorPositionOffset", &POA_Control::MountVertexLLama::setSubreflectorPositionOffset_skel, 0},
      {"setSubreflectorRotationOffset", &POA_Control::MountVertexLLama::setSubreflectorRotationOffset_skel, 0},
      {"setAuxPointingModelCoefficient", &POA_Control::MountVertexLLama::setAuxPointingModelCoefficient_skel, 0},
      {"GET_METR_TEMPS_0F", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0F_skel, 0},
      {"GET_METR_TEMPS_1F", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1F_skel, 0},
      {"hwSimulation", &POA_Control::MountVertexLLama::hwSimulation_skel, 0},
      {"GET_AZ_SERVO_COEFF_F", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_F_skel, 0},
      {"GET_EL_SERVO_COEFF_F", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_F_skel, 0},
      {"GET_PT_MODEL_COEFF_0F", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0F_skel, 0},
      {"GET_SYSTEM_ID", &POA_Control::MountVertexLLama::GET_SYSTEM_ID_skel, 0},
      {"GET_UPS_ALARMS_POWER_OFF", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_POWER_OFF_skel, 0},
      {"GET_METR_TEMPS_0D", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0D_skel, 0},
      {"GET_METR_TEMPS_1D", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1D_skel, 0},
      {"SET_AZ_SERVO_COEFF_5", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_5_skel, 0},
      {"SET_EL_SERVO_COEFF_5", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_5_skel, 0},
      {"SET_PT_MODEL_COEFF_05", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_05_skel, 0},
      {"GET_AZ_SERVO_COEFF_D", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_D_skel, 0},
      {"GET_EL_AXIS_DISABLED", &POA_Control::MountVertexLLama::GET_EL_AXIS_DISABLED_skel, 0},
      {"GET_AZ_AXIS_DISABLED", &POA_Control::MountVertexLLama::GET_AZ_AXIS_DISABLED_skel, 0},
      {"GET_EL_SERVO_COEFF_D", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_D_skel, 0},
      {"GET_PT_MODEL_COEFF_0D", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0D_skel, 0},
      {"GET_SELFTEST_ACTIVATED", &POA_Control::MountVertexLLama::GET_SELFTEST_ACTIVATED_skel, 0},
      {"GET_SELFTEST_RSP_FAILED", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_FAILED_skel, 0},
      {"GET_UPS_ALARMS_OVERLOAD", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_OVERLOAD_skel, 0},
      {"GET_AZ_COMPUTER_DISABLED", &POA_Control::MountVertexLLama::GET_AZ_COMPUTER_DISABLED_skel, 0},
      {"GET_EL_COMPUTER_DISABLED", &POA_Control::MountVertexLLama::GET_EL_COMPUTER_DISABLED_skel, 0},
      {"SET_AZ_SERVO_DEFAULT", &POA_Control::MountVertexLLama::SET_AZ_SERVO_DEFAULT_skel, 0},
      {"SET_SUBREF_DELTA_ROT", &POA_Control::MountVertexLLama::SET_SUBREF_DELTA_ROT_skel, 0},
      {"SET_EL_SERVO_DEFAULT", &POA_Control::MountVertexLLama::SET_EL_SERVO_DEFAULT_skel, 0},
      {"GET_SELFTEST_RSP_COMPLETED", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_COMPLETED_skel, 0},
      {"GET_AZ_HAND_CRANK_INSERTED", &POA_Control::MountVertexLLama::GET_AZ_HAND_CRANK_INSERTED_skel, 0},
      {"find_characteristic", &POA_Control::MountVertexLLama::find_characteristic_skel, 0},
      {"GET_LIGHTNING_ARRESTOR_TRIPPED", &POA_Control::MountVertexLLama::GET_LIGHTNING_ARRESTOR_TRIPPED_skel, 0},
      {"GET_SURVIVAL_STOW_DT_MISSING_CMD", &POA_Control::MountVertexLLama::GET_SURVIVAL_STOW_DT_MISSING_CMD_skel, 0},
      {"GET_SUBREF_ACT_6_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_6_NOT_INITIALIZED_skel, 0},
      {"GET_SUBREF_ACT_5_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_5_NOT_INITIALIZED_skel, 0},
      {"GET_SUBREF_ACT_4_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_4_NOT_INITIALIZED_skel, 0},
      {"GET_SUBREF_ACT_3_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_3_NOT_INITIALIZED_skel, 0},
      {"GET_SUBREF_ACT_2_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_2_NOT_INITIALIZED_skel, 0},
      {"GET_SUBREF_ACT_1_NOT_INITIALIZED", &POA_Control::MountVertexLLama::GET_SUBREF_ACT_1_NOT_INITIALIZED_skel, 0},
      {"GET_UPS_ALARMS_BATTERY_DISCHARGED", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BATTERY_DISCHARGED_skel, 0},
      {"GET_UPS_ALARMS_RETRANSFER_BLOCKED", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_RETRANSFER_BLOCKED_skel, 0},
      {"GET_LADDER_TO_PLATFORM_1_RETRACTED", &POA_Control::MountVertexLLama::GET_LADDER_TO_PLATFORM_1_RETRACTED_skel, 0},
      {"GET_AZ_TRAJ_VEL", &POA_Control::MountVertexLLama::GET_AZ_TRAJ_VEL_skel, 0},
      {"GET_EL_TRAJ_VEL", &POA_Control::MountVertexLLama::GET_EL_TRAJ_VEL_skel, 0},
      {"GET_SW_REV_LEVEL", &POA_Control::MountVertexLLama::GET_SW_REV_LEVEL_skel, 0},
      {"GET_REVERSE_PHASE_PROTECTION_RELEASED", &POA_Control::MountVertexLLama::GET_REVERSE_PHASE_PROTECTION_RELEASED_skel, 0},
      {"GET_UPS_ALARMS_INVERTER_BRIDGE_BLOCKED", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_INVERTER_BRIDGE_BLOCKED_skel, 0},
      {"GET_METR_EQUIP_STATUS_METR_DATA_INVALID", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_METR_DATA_INVALID_skel, 0},
      {"GET_AZ_POSN_RSP", &POA_Control::MountVertexLLama::GET_AZ_POSN_RSP_skel, 0},
      {"GET_ALMA_E_STOP", &POA_Control::MountVertexLLama::GET_ALMA_E_STOP_skel, 0},
      {"GET_EL_LIMIT_UP", &POA_Control::MountVertexLLama::GET_EL_LIMIT_UP_skel, 0},
      {"GET_EL_POSN_RSP", &POA_Control::MountVertexLLama::GET_EL_POSN_RSP_skel, 0},
      {"GET_ACU_MODE_RSP", &POA_Control::MountVertexLLama::GET_ACU_MODE_RSP_skel, 0},
      {"GET_SELFTEST_RSP", &POA_Control::MountVertexLLama::GET_SELFTEST_RSP_skel, 0},
      {"GET_ALS_STATUS_AZ_PUMP_FAIL", &POA_Control::MountVertexLLama::GET_ALS_STATUS_AZ_PUMP_FAIL_skel, 0},
      {"GET_ALS_STATUS_EL_PUMP_FAIL", &POA_Control::MountVertexLLama::GET_ALS_STATUS_EL_PUMP_FAIL_skel, 0},
      {"GET_EL_PRELIMIT_UP", &POA_Control::MountVertexLLama::GET_EL_PRELIMIT_UP_skel, 0},
      {"GET_EMERGENCY_STOP", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_skel, 0},
      {"GET_ACU_TRK_MODE_RSP", &POA_Control::MountVertexLLama::GET_ACU_TRK_MODE_RSP_skel, 0},
      {"GET_METR_DELTAS_DISP", &POA_Control::MountVertexLLama::GET_METR_DELTAS_DISP_skel, 0},
      {"GET_METR_DELTAS_TEMP", &POA_Control::MountVertexLLama::GET_METR_DELTAS_TEMP_skel, 0},
      {"GET_CABINET_OVER_TEMP", &POA_Control::MountVertexLLama::GET_CABINET_OVER_TEMP_skel, 0},
      {"hwStart", &POA_Control::MountVertexLLama::hwStart_skel, 0},
      {"GET_AZ_MOTOR_1_OVER_TEMP", &POA_Control::MountVertexLLama::GET_AZ_MOTOR_1_OVER_TEMP_skel, 0},
      {"GET_METR_DELTAS_TILTTEMP", &POA_Control::MountVertexLLama::GET_METR_DELTAS_TILTTEMP_skel, 0},
      {"GET_EL_MOTOR_4_OVER_TEMP", &POA_Control::MountVertexLLama::GET_EL_MOTOR_4_OVER_TEMP_skel, 0},
      {"GET_EL_MOTOR_3_OVER_TEMP", &POA_Control::MountVertexLLama::GET_EL_MOTOR_3_OVER_TEMP_skel, 0},
      {"GET_EL_MOTOR_2_OVER_TEMP", &POA_Control::MountVertexLLama::GET_EL_MOTOR_2_OVER_TEMP_skel, 0},
      {"GET_EL_MOTOR_1_OVER_TEMP", &POA_Control::MountVertexLLama::GET_EL_MOTOR_1_OVER_TEMP_skel, 0},
      {"GET_AZ_MOTOR_2_OVER_TEMP", &POA_Control::MountVertexLLama::GET_AZ_MOTOR_2_OVER_TEMP_skel, 0},
      {"GET_EL_EMERGENCY_LIMIT_UP", &POA_Control::MountVertexLLama::GET_EL_EMERGENCY_LIMIT_UP_skel, 0},
      {"GET_SUBREF_ROTATION_X_TIP", &POA_Control::MountVertexLLama::GET_SUBREF_ROTATION_X_TIP_skel, 0},
      {"GET_SUBREF_CORR_ROT_X_TIP", &POA_Control::MountVertexLLama::GET_SUBREF_CORR_ROT_X_TIP_skel, 0},
      {"GET_EMERGENCY_STOP_AT_OUTSIDE_PEDESTAL", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_AT_OUTSIDE_PEDESTAL_skel, 0},
      {"setBand", &POA_Control::MountVertexLLama::setBand_skel, 0},
      {"GET_METR_TEMPS_08", &POA_Control::MountVertexLLama::GET_METR_TEMPS_08_skel, 0},
      {"GET_METR_TEMPS_18", &POA_Control::MountVertexLLama::GET_METR_TEMPS_18_skel, 0},
      {"GET_AZ_SERVO_COEFF_8", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_8_skel, 0},
      {"GET_EL_SERVO_COEFF_8", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_8_skel, 0},
      {"GET_PT_MODEL_COEFF_08", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_08_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_1_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_1_OVERTEMP_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_6_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_6_OVERTEMP_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_5_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_5_OVERTEMP_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_4_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_4_OVERTEMP_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_3_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_3_OVERTEMP_skel, 0},
      {"GET_SUBREF_AMPLIFIER_ACT_2_OVERTEMP", &POA_Control::MountVertexLLama::GET_SUBREF_AMPLIFIER_ACT_2_OVERTEMP_skel, 0},
      {"SET_AZ_SERVO_COEFF_F", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_F_skel, 0},
      {"SET_EL_SERVO_COEFF_F", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_F_skel, 0},
      {"SET_PT_MODEL_COEFF_0F", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0F_skel, 0},
      {"GET_AZ_REGENERATION_RESISTOR_OVER_TEMP", &POA_Control::MountVertexLLama::GET_AZ_REGENERATION_RESISTOR_OVER_TEMP_skel, 0},
      {"GET_EL_REGENERATION_RESISTOR_OVER_TEMP", &POA_Control::MountVertexLLama::GET_EL_REGENERATION_RESISTOR_OVER_TEMP_skel, 0},
      {"GET_RAMP_TO_RECEIVER_CABIN_NO_TILTED_UP", &POA_Control::MountVertexLLama::GET_RAMP_TO_RECEIVER_CABIN_NO_TILTED_UP_skel, 0},
      {"SET_AZ_TRAJ_CMD", &POA_Control::MountVertexLLama::SET_AZ_TRAJ_CMD_skel, 0},
      {"SET_EL_TRAJ_CMD", &POA_Control::MountVertexLLama::SET_EL_TRAJ_CMD_skel, 0},
      {"SET_SELFTEST_CMD", &POA_Control::MountVertexLLama::SET_SELFTEST_CMD_skel, 0},
      {"descriptor", &POA_Control::MountVertexLLama::descriptor_skel, 0},
      {"GET_EMERGENCY_STOP_ACESS_TO_PLATFORM_OUTSIDE_PEDESTAL", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_ACESS_TO_PLATFORM_OUTSIDE_PEDESTAL_skel, 0},
      {"SET_CLEAR_FAULT_CMD", &POA_Control::MountVertexLLama::SET_CLEAR_FAULT_CMD_skel, 0},
      {"SET_INIT_SUBREF_CMD", &POA_Control::MountVertexLLama::SET_INIT_SUBREF_CMD_skel, 0},
      {"SET_AZ_SERVO_COEFF_D", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_D_skel, 0},
      {"SET_EL_SERVO_COEFF_D", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_D_skel, 0},
      {"SET_PT_MODEL_COEFF_0D", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0D_skel, 0},
      {"setFocusModel", &POA_Control::MountVertexLLama::setFocusModel_skel, 0},
      {"SET_SUBREF_DELTA_ZERO_CMD", &POA_Control::MountVertexLLama::SET_SUBREF_DELTA_ZERO_CMD_skel, 0},
      {"setPointingModel", &POA_Control::MountVertexLLama::setPointingModel_skel, 0},
      {"setMaintenanceAzEl", &POA_Control::MountVertexLLama::setMaintenanceAzEl_skel, 0},
      {"setAuxPointingModel", &POA_Control::MountVertexLLama::setAuxPointingModel_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_8", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_8_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_8", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_8_skel, 0},
      {"reloadFocusModel", &POA_Control::MountVertexLLama::reloadFocusModel_skel, 0},
      {"reportFocusModel", &POA_Control::MountVertexLLama::reportFocusModel_skel, 0},
      {"zeroPointingModel", &POA_Control::MountVertexLLama::zeroPointingModel_skel, 0},
      {"reloadPointingModel", &POA_Control::MountVertexLLama::reloadPointingModel_skel, 0},
      {"reportPointingModel", &POA_Control::MountVertexLLama::reportPointingModel_skel, 0},
      {"zeroAuxPointingModel", &POA_Control::MountVertexLLama::zeroAuxPointingModel_skel, 0},
      {"SET_REC_CAB_TEMP", &POA_Control::MountVertexLLama::SET_REC_CAB_TEMP_skel, 0},
      {"SET_SELFTEST_STOP", &POA_Control::MountVertexLLama::SET_SELFTEST_STOP_skel, 0},
      {"GET_METR_TILT_0", &POA_Control::MountVertexLLama::GET_METR_TILT_0_skel, 0},
      {"GET_METR_COEFF_0", &POA_Control::MountVertexLLama::GET_METR_COEFF_0_skel, 0},
      {"GET_METR_DISPL_0", &POA_Control::MountVertexLLama::GET_METR_DISPL_0_skel, 0},
      {"GET_METR_TEMPS_00", &POA_Control::MountVertexLLama::GET_METR_TEMPS_00_skel, 0},
      {"GET_METR_TEMPS_10", &POA_Control::MountVertexLLama::GET_METR_TEMPS_10_skel, 0},
      {"GET_STOW_PIN", &POA_Control::MountVertexLLama::GET_STOW_PIN_skel, 0},
      {"GET_AZ_SERVO_COEFF_0", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_0_skel, 0},
      {"GET_EL_SERVO_COEFF_0", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_0_skel, 0},
      {"GET_PT_MODEL_COEFF_00", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_00_skel, 0},
      {"GET_EL_LIMIT_DOWN", &POA_Control::MountVertexLLama::GET_EL_LIMIT_DOWN_skel, 0},
      {"GET_SUBREF_ABS_POSN", &POA_Control::MountVertexLLama::GET_SUBREF_ABS_POSN_skel, 0},
      {"GET_SUBREF_ROTATION", &POA_Control::MountVertexLLama::GET_SUBREF_ROTATION_skel, 0},
      {"GET_EL_PRELIMIT_DOWN", &POA_Control::MountVertexLLama::GET_EL_PRELIMIT_DOWN_skel, 0},
      {"GET_SUBREF_DELTA_POSN", &POA_Control::MountVertexLLama::GET_SUBREF_DELTA_POSN_skel, 0},
      {"GET_UPS_ALARMS_OPTION", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_OPTION_skel, 0},
      {"GET_PEDESTAL_DOOR_OPEN", &POA_Control::MountVertexLLama::GET_PEDESTAL_DOOR_OPEN_skel, 0},
      {"GET_DRIVE_CABINET_OPEN", &POA_Control::MountVertexLLama::GET_DRIVE_CABINET_OPEN_skel, 0},
      {"SET_AZ_SERVO_COEFF_8", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_8_skel, 0},
      {"SET_EL_SERVO_COEFF_8", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_8_skel, 0},
      {"SET_PT_MODEL_COEFF_08", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_08_skel, 0},
      {"GET_GATE_PLATFORM_2_OPEN", &POA_Control::MountVertexLLama::GET_GATE_PLATFORM_2_OPEN_skel, 0},
      {"GET_AZ_POSITION_DEVIATION", &POA_Control::MountVertexLLama::GET_AZ_POSITION_DEVIATION_skel, 0},
      {"GET_SMOKE_ALARM_CONDITION", &POA_Control::MountVertexLLama::GET_SMOKE_ALARM_CONDITION_skel, 0},
      {"GET_EL_POSITION_DEVIATION", &POA_Control::MountVertexLLama::GET_EL_POSITION_DEVIATION_skel, 0},
      {"GET_EL_EMERGENCY_LIMIT_DOWN", &POA_Control::MountVertexLLama::GET_EL_EMERGENCY_LIMIT_DOWN_skel, 0},
      {"GET_RECEIVER_CABIN_DOOR_OPEN", &POA_Control::MountVertexLLama::GET_RECEIVER_CABIN_DOOR_OPEN_skel, 0},
      {"GET_AZ_HANDHELD_PCU_OPERATION", &POA_Control::MountVertexLLama::GET_AZ_HANDHELD_PCU_OPERATION_skel, 0},
      {"GET_EL_HANDHELD_PCU_OPERATION", &POA_Control::MountVertexLLama::GET_EL_HANDHELD_PCU_OPERATION_skel, 0},
      {"timeToSlew", &POA_Control::MountVertexLLama::timeToSlew_skel, 0},
      {"GET_EMERGENCY_STOP_RECEIVER_CABIN", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_RECEIVER_CABIN_skel, 0},
      {"GET_UPS_ALARMS_BATTERY_SWITCH_OPEN", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BATTERY_SWITCH_OPEN_skel, 0},
      {"GET_UPS_ALARMS_RECTIFIER_FUSE_BLOWN", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_RECTIFIER_FUSE_BLOWN_skel, 0},
      {"GET_UPS_ALARMS_BYPASS_SWITCH_POSITION", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BYPASS_SWITCH_POSITION_skel, 0},
      {"GET_AUTO_LUBRICATION_SYSTEM_MALFUNCTION", &POA_Control::MountVertexLLama::GET_AUTO_LUBRICATION_SYSTEM_MALFUNCTION_skel, 0},
      {"GET_EMERGENCY_STOP_PLATFORM_2_RECV_CABIN", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_PLATFORM_2_RECV_CABIN_skel, 0},
      {"hwOperational", &POA_Control::MountVertexLLama::hwOperational_skel, 0},
      {"GET_METR_TILT_1", &POA_Control::MountVertexLLama::GET_METR_TILT_1_skel, 0},
      {"GET_METR_COEFF_1", &POA_Control::MountVertexLLama::GET_METR_COEFF_1_skel, 0},
      {"GET_UPS_STATUS_1", &POA_Control::MountVertexLLama::GET_UPS_STATUS_1_skel, 0},
      {"GET_METR_DISPL_1", &POA_Control::MountVertexLLama::GET_METR_DISPL_1_skel, 0},
      {"GET_METR_TEMPS_01", &POA_Control::MountVertexLLama::GET_METR_TEMPS_01_skel, 0},
      {"GET_METR_TEMPS_11", &POA_Control::MountVertexLLama::GET_METR_TEMPS_11_skel, 0},
      {"SET_METR_COEFF_0", &POA_Control::MountVertexLLama::SET_METR_COEFF_0_skel, 0},
      {"GET_AZ_SERVO_COEFF_1", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_1_skel, 0},
      {"GET_EL_SERVO_COEFF_1", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_1_skel, 0},
      {"GET_PT_MODEL_COEFF_01", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_01_skel, 0},
      {"SET_STOW_PIN", &POA_Control::MountVertexLLama::SET_STOW_PIN_skel, 0},
      {"SET_AZ_SERVO_COEFF_0", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_0_skel, 0},
      {"SET_EL_SERVO_COEFF_0", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_0_skel, 0},
      {"SET_PT_MODEL_COEFF_00", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_00_skel, 0},
      {"GET_EL_MOTOR_TEMPS_MOTOR1", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TEMPS_MOTOR1_skel, 0},
      {"GET_BYPASS_VOLTAGE_PHASE_1", &POA_Control::MountVertexLLama::GET_BYPASS_VOLTAGE_PHASE_1_skel, 0},
      {"GET_EL_MOTOR_TORQUE_MOTOR1", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TORQUE_MOTOR1_skel, 0},
      {"GET_INVERTER_VOLTAGE_PHASE_1", &POA_Control::MountVertexLLama::GET_INVERTER_VOLTAGE_PHASE_1_skel, 0},
      {"GET_EL_MOTOR_CURRENTS_MOTOR1", &POA_Control::MountVertexLLama::GET_EL_MOTOR_CURRENTS_MOTOR1_skel, 0},
      {"SET_SUBREF_ABS_POSN", &POA_Control::MountVertexLLama::SET_SUBREF_ABS_POSN_skel, 0},
      {"SET_SUBREF_ROTATION", &POA_Control::MountVertexLLama::SET_SUBREF_ROTATION_skel, 0},
      {"GET_METR_TEMPS_0B", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0B_skel, 0},
      {"GET_METR_TEMPS_1B", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1B_skel, 0},
      {"SET_SUBREF_DELTA_POSN", &POA_Control::MountVertexLLama::SET_SUBREF_DELTA_POSN_skel, 0},
      {"GET_AZ_SERVO_COEFF_B", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_B_skel, 0},
      {"GET_EL_SERVO_COEFF_B", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_B_skel, 0},
      {"GET_PT_MODEL_COEFF_0B", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0B_skel, 0},
      {"GET_METR_TEMPS_04", &POA_Control::MountVertexLLama::GET_METR_TEMPS_04_skel, 0},
      {"GET_METR_TEMPS_14", &POA_Control::MountVertexLLama::GET_METR_TEMPS_14_skel, 0},
      {"GET_EMERGENCY_STOP_LADDER_TO_PLATFORM_1", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_LADDER_TO_PLATFORM_1_skel, 0},
      {"GET_AZ_SERVO_COEFF_4", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_4_skel, 0},
      {"GET_EL_SERVO_COEFF_4", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_4_skel, 0},
      {"GET_PT_MODEL_COEFF_04", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_04_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_1", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_1_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_1", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_1_skel, 0},
      {"GET_EL_MOTOR_TEMPS_MOTOR4", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TEMPS_MOTOR4_skel, 0},
      {"GET_EL_MOTOR_TORQUE_MOTOR4", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TORQUE_MOTOR4_skel, 0},
      {"GET_EL_MOTOR_CURRENTS_MOTOR4", &POA_Control::MountVertexLLama::GET_EL_MOTOR_CURRENTS_MOTOR4_skel, 0},
      {"GET_EMERGENCY_STOP_NASMYTH_CABINS_AB", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_NASMYTH_CABINS_AB_skel, 0},
      {"getMotionLimits", &POA_Control::MountVertexLLama::getMotionLimits_skel, 0},
      {"timeToSlewFromCurrent", &POA_Control::MountVertexLLama::timeToSlewFromCurrent_skel, 0},
      {"GET_IP_GATEWAY", &POA_Control::MountVertexLLama::GET_IP_GATEWAY_skel, 0},
      {"getServoCorrections", &POA_Control::MountVertexLLama::getServoCorrections_skel, 0},
      {"getSubreflectorLimits", &POA_Control::MountVertexLLama::getSubreflectorLimits_skel, 0},
      {"get_all_characteristics", &POA_Control::MountVertexLLama::get_all_characteristics_skel, 0},
      {"GET_BYPASS_FREQUENCY", &POA_Control::MountVertexLLama::GET_BYPASS_FREQUENCY_skel, 0},
      {"getSerialNumber", &POA_Control::MountVertexLLama::getSerialNumber_skel, 0},
      {"GET_INVERTER_FREQUENCY", &POA_Control::MountVertexLLama::GET_INVERTER_FREQUENCY_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_4", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_4_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_4", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_4_skel, 0},
      {"GET_UPS_ALARMS_LOAD_SUPPLY", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_LOAD_SUPPLY_skel, 0},
      {"getSubreflectorPositionToleranceZ", &POA_Control::MountVertexLLama::getSubreflectorPositionToleranceZ_skel, 0},
      {"GET_UPS_ALARMS_BATTERY_CAPACITY", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_BATTERY_CAPACITY_skel, 0},
      {"SET_METR_COEFF_1", &POA_Control::MountVertexLLama::SET_METR_COEFF_1_skel, 0},
      {"setSubreflectorPositionToleranceXY", &POA_Control::MountVertexLLama::setSubreflectorPositionToleranceXY_skel, 0},
      {"SET_AZ_SERVO_COEFF_1", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_1_skel, 0},
      {"SET_EL_SERVO_COEFF_1", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_1_skel, 0},
      {"SET_PT_MODEL_COEFF_01", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_01_skel, 0},
      {"getDeviceCommunicationErrorCounter", &POA_Control::MountVertexLLama::getDeviceCommunicationErrorCounter_skel, 0},
      {"GET_METR_TILT_2", &POA_Control::MountVertexLLama::GET_METR_TILT_2_skel, 0},
      {"GET_METR_DISPL_2", &POA_Control::MountVertexLLama::GET_METR_DISPL_2_skel, 0},
      {"GET_UPS_STATUS_2", &POA_Control::MountVertexLLama::GET_UPS_STATUS_2_skel, 0},
      {"GET_METR_TEMPS_02", &POA_Control::MountVertexLLama::GET_METR_TEMPS_02_skel, 0},
      {"GET_METR_TEMPS_12", &POA_Control::MountVertexLLama::GET_METR_TEMPS_12_skel, 0},
      {"GET_AZ_FLIP_FLOP_BUFFER_POSITION_INCORRECTLY", &POA_Control::MountVertexLLama::GET_AZ_FLIP_FLOP_BUFFER_POSITION_INCORRECTLY_skel, 0},
      {"GET_AZ_SERVO_COEFF_2", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_2_skel, 0},
      {"GET_EL_SERVO_COEFF_2", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_2_skel, 0},
      {"GET_PT_MODEL_COEFF_02", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_02_skel, 0},
      {"SET_AZ_SERVO_COEFF_B", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_B_skel, 0},
      {"SET_EL_SERVO_COEFF_B", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_B_skel, 0},
      {"SET_PT_MODEL_COEFF_0B", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0B_skel, 0},
      {"GET_EL_MOTOR_TEMPS_MOTOR2", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TEMPS_MOTOR2_skel, 0},
      {"GET_BYPASS_VOLTAGE_PHASE_2", &POA_Control::MountVertexLLama::GET_BYPASS_VOLTAGE_PHASE_2_skel, 0},
      {"GET_EL_MOTOR_TORQUE_MOTOR2", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TORQUE_MOTOR2_skel, 0},
      {"GET_INVERTER_VOLTAGE_PHASE_2", &POA_Control::MountVertexLLama::GET_INVERTER_VOLTAGE_PHASE_2_skel, 0},
      {"GET_EL_MOTOR_CURRENTS_MOTOR2", &POA_Control::MountVertexLLama::GET_EL_MOTOR_CURRENTS_MOTOR2_skel, 0},
      {"GET_EMERGENCY_STOP_PLATFORM_2", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_PLATFORM_2_skel, 0},
      {"SET_AZ_SERVO_COEFF_4", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_4_skel, 0},
      {"SET_EL_SERVO_COEFF_4", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_4_skel, 0},
      {"SET_PT_MODEL_COEFF_04", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_04_skel, 0},
      {"GET_COMMUNICATION_ERROR_ACU_UPS2", &POA_Control::MountVertexLLama::GET_COMMUNICATION_ERROR_ACU_UPS2_skel, 0},
      {"getMountStatusData", &POA_Control::MountVertexLLama::getMountStatusData_skel, 0},
      {"GET_SHUTTER", &POA_Control::MountVertexLLama::GET_SHUTTER_skel, 0},
      {"GET_CAN_ERROR", &POA_Control::MountVertexLLama::GET_CAN_ERROR_skel, 0},
      {"GET_ACU_ERROR", &POA_Control::MountVertexLLama::GET_ACU_ERROR_skel, 0},
      {"GET_SELFTEST_ERR", &POA_Control::MountVertexLLama::GET_SELFTEST_ERR_skel, 0},
      {"GET_CHANNEL_NUMBER", &POA_Control::MountVertexLLama::GET_CHANNEL_NUMBER_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_2", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_2_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_2", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_2_skel, 0},
      {"GET_MAIN_CIRCUIT_BREAKER", &POA_Control::MountVertexLLama::GET_MAIN_CIRCUIT_BREAKER_skel, 0},
      {"GET_UPS_ALARMS_COMM_ERROR", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_COMM_ERROR_skel, 0},
      {"GET_METR_EQUIP_STATUS_LOCAL_BUS_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_LOCAL_BUS_ERR_skel, 0},
      {"GET_EMERGENCY_STOP_CONTROL_CONTAINER", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_CONTROL_CONTAINER_skel, 0},
      {"GET_METR_EQUIP_STATUS_TILTMETER_1_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_TILTMETER_1_ERR_skel, 0},
      {"GET_UPS_ALARMS_OUTPUT_CIRCUIT_BREAKER", &POA_Control::MountVertexLLama::GET_UPS_ALARMS_OUTPUT_CIRCUIT_BREAKER_skel, 0},
      {"GET_METR_EQUIP_STATUS_TEMP_SENSOR_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_TEMP_SENSOR_ERR_skel, 0},
      {"GET_METR_EQUIP_STATUS_TILTMETER_3_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_TILTMETER_3_ERR_skel, 0},
      {"GET_METR_EQUIP_STATUS_TILTMETER_2_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_TILTMETER_2_ERR_skel, 0},
      {"GET_METR_EQUIP_STATUS_DISPL_SENSOR_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_DISPL_SENSOR_ERR_skel, 0},
      {"GET_METR_EQUIP_STATUS_ACU_MMC_COMM_ERR", &POA_Control::MountVertexLLama::GET_METR_EQUIP_STATUS_ACU_MMC_COMM_ERR_skel, 0},
      {"GET_AZ_CAN_COMM_ERROR_TO_SERVO_AMPLIFIER", &POA_Control::MountVertexLLama::GET_AZ_CAN_COMM_ERROR_TO_SERVO_AMPLIFIER_skel, 0},
      {"setAxisMode", &POA_Control::MountVertexLLama::setAxisMode_skel, 0},
      {"setTolerance", &POA_Control::MountVertexLLama::setTolerance_skel, 0},
      {"setAzAxisMode", &POA_Control::MountVertexLLama::setAzAxisMode_skel, 0},
      {"setElAxisMode", &POA_Control::MountVertexLLama::setElAxisMode_skel, 0},
      {"GET_EMERGENCY_STOP_AZ_DRIVES_EQUIP_CONTAINER", &POA_Control::MountVertexLLama::GET_EMERGENCY_STOP_AZ_DRIVES_EQUIP_CONTAINER_skel, 0},
      {"encoder", &POA_Control::MountVertexLLama::encoder_skel, 0},
      {"onSource", &POA_Control::MountVertexLLama::onSource_skel, 0},
      {"GET_AZ_ENC", &POA_Control::MountVertexLLama::GET_AZ_ENC_skel, 0},
      {"GET_EL_ENC", &POA_Control::MountVertexLLama::GET_EL_ENC_skel, 0},
      {"SET_AZ_SERVO_COEFF_2", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_2_skel, 0},
      {"SET_EL_SERVO_COEFF_2", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_2_skel, 0},
      {"SET_PT_MODEL_COEFF_02", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_02_skel, 0},
      {"setFocusModelTemperature", &POA_Control::MountVertexLLama::setFocusModelTemperature_skel, 0},
      {"_get_SELFTEST_RSP_RUNNING", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_RUNNING_skel, 0},
      {"GET_METR_TEMPS_0C", &POA_Control::MountVertexLLama::GET_METR_TEMPS_0C_skel, 0},
      {"GET_METR_TEMPS_1C", &POA_Control::MountVertexLLama::GET_METR_TEMPS_1C_skel, 0},
      {"GET_AZ_SERVO_COEFF_C", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_C_skel, 0},
      {"GET_EL_SERVO_COEFF_C", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_C_skel, 0},
      {"GET_PT_MODEL_COEFF_0C", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_0C_skel, 0},
      {"setSubreflectorRotationTolerance", &POA_Control::MountVertexLLama::setSubreflectorRotationTolerance_skel, 0},
      {"isShutterOpen", &POA_Control::MountVertexLLama::isShutterOpen_skel, 0},
      {"GET_METR_TEMPS_07", &POA_Control::MountVertexLLama::GET_METR_TEMPS_07_skel, 0},
      {"GET_METR_TEMPS_17", &POA_Control::MountVertexLLama::GET_METR_TEMPS_17_skel, 0},
      {"SET_SHUTTER", &POA_Control::MountVertexLLama::SET_SHUTTER_skel, 0},
      {"GET_AZ_SERVO_COEFF_7", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_7_skel, 0},
      {"GET_EL_SERVO_COEFF_7", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_7_skel, 0},
      {"GET_PT_MODEL_COEFF_07", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_07_skel, 0},
      {"GET_SUBREF_COMM_ERROR_ACU_HPC", &POA_Control::MountVertexLLama::GET_SUBREF_COMM_ERROR_ACU_HPC_skel, 0},
      {"GET_COMMUNICATION_ERROR_ACU_PLC", &POA_Control::MountVertexLLama::GET_COMMUNICATION_ERROR_ACU_PLC_skel, 0},
      {"isInsideCLOUDSATRegion", &POA_Control::MountVertexLLama::isInsideCLOUDSATRegion_skel, 0},
      {"GET_METR_DISPL_3", &POA_Control::MountVertexLLama::GET_METR_DISPL_3_skel, 0},
      {"GET_METR_TEMPS_03", &POA_Control::MountVertexLLama::GET_METR_TEMPS_03_skel, 0},
      {"GET_METR_TEMPS_13", &POA_Control::MountVertexLLama::GET_METR_TEMPS_13_skel, 0},
      {"GET_AZ_SERVO_COEFF_3", &POA_Control::MountVertexLLama::GET_AZ_SERVO_COEFF_3_skel, 0},
      {"GET_EL_SERVO_COEFF_3", &POA_Control::MountVertexLLama::GET_EL_SERVO_COEFF_3_skel, 0},
      {"GET_PT_MODEL_COEFF_03", &POA_Control::MountVertexLLama::GET_PT_MODEL_COEFF_03_skel, 0},
      {"_is_a", &POA_Control::MountVertexLLama::_is_a_skel, 0},
      {"GET_EL_MOTOR_TEMPS_MOTOR3", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TEMPS_MOTOR3_skel, 0},
      {"GET_BYPASS_VOLTAGE_PHASE_3", &POA_Control::MountVertexLLama::GET_BYPASS_VOLTAGE_PHASE_3_skel, 0},
      {"GET_EL_MOTOR_TORQUE_MOTOR3", &POA_Control::MountVertexLLama::GET_EL_MOTOR_TORQUE_MOTOR3_skel, 0},
      {"_get_UPS1_INVERTER_SW", &POA_Control::MountVertexLLama::_get_UPS1_INVERTER_SW_skel, 0},
      {"_get_UPS2_INVERTER_SW", &POA_Control::MountVertexLLama::_get_UPS2_INVERTER_SW_skel, 0},
      {"GET_INVERTER_VOLTAGE_PHASE_3", &POA_Control::MountVertexLLama::GET_INVERTER_VOLTAGE_PHASE_3_skel, 0},
      {"GET_EL_MOTOR_CURRENTS_MOTOR3", &POA_Control::MountVertexLLama::GET_EL_MOTOR_CURRENTS_MOTOR3_skel, 0},
      {"_get_AZ_TRAJ", &POA_Control::MountVertexLLama::_get_AZ_TRAJ_skel, 0},
      {"_get_EL_TRAJ", &POA_Control::MountVertexLLama::_get_EL_TRAJ_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_7", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_7_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_7", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_7_skel, 0},
      {"_get_METR_TEMPS_06", &POA_Control::MountVertexLLama::_get_METR_TEMPS_06_skel, 0},
      {"_get_METR_TEMPS_16", &POA_Control::MountVertexLLama::_get_METR_TEMPS_16_skel, 0},
      {"_get_METR_DELTAS_SPEM", &POA_Control::MountVertexLLama::_get_METR_DELTAS_SPEM_skel, 0},
      {"_get_AZ_SERVO_COEFF_6", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_6_skel, 0},
      {"_get_EL_SERVO_COEFF_6", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_6_skel, 0},
      {"_get_PT_MODEL_COEFF_06", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_06_skel, 0},
      {"GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_3", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_VERTICAL_COLLISION_SWITCH_3_skel, 0},
      {"_get_NUM_TRANS", &POA_Control::MountVertexLLama::_get_NUM_TRANS_skel, 0},
      {"_get_UPS_FREQS", &POA_Control::MountVertexLLama::_get_UPS_FREQS_skel, 0},
      {"_get_AC_STATUS", &POA_Control::MountVertexLLama::_get_AC_STATUS_skel, 0},
      {"_get_EL_STATUS", &POA_Control::MountVertexLLama::_get_EL_STATUS_skel, 0},
      {"_get_AZ_STATUS", &POA_Control::MountVertexLLama::_get_AZ_STATUS_skel, 0},
      {"_get_IP_ADDRESS", &POA_Control::MountVertexLLama::_get_IP_ADDRESS_skel, 0},
      {"_get_UPS2_FREQS", &POA_Control::MountVertexLLama::_get_UPS2_FREQS_skel, 0},
      {"_get_ALS_STATUS", &POA_Control::MountVertexLLama::_get_ALS_STATUS_skel, 0},
      {"_get_UPS_ALARMS", &POA_Control::MountVertexLLama::_get_UPS_ALARMS_skel, 0},
      {"_get_METR_DELTAS", &POA_Control::MountVertexLLama::_get_METR_DELTAS_skel, 0},
      {"_get_UPS2_ALARMS", &POA_Control::MountVertexLLama::_get_UPS2_ALARMS_skel, 0},
      {"GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_3", &POA_Control::MountVertexLLama::GET_SL_HEXAPOD_HORIZONTAL_COLLISION_SWITCH_3_skel, 0},
      {"_get_POWER_STATUS", &POA_Control::MountVertexLLama::_get_POWER_STATUS_skel, 0},
      {"_get_OTHER_STATUS", &POA_Control::MountVertexLLama::_get_OTHER_STATUS_skel, 0},
      {"_get_ANTENNA_TEMPS", &POA_Control::MountVertexLLama::_get_ANTENNA_TEMPS_skel, 0},
      {"_get_SUBREF_LIMITS", &POA_Control::MountVertexLLama::_get_SUBREF_LIMITS_skel, 0},
      {"_get_SUBREF_STATUS", &POA_Control::MountVertexLLama::_get_SUBREF_STATUS_skel, 0},
      {"_get_SYSTEM_STATUS", &POA_Control::MountVertexLLama::_get_SYSTEM_STATUS_skel, 0},
      {"_get_EL_ENC_STATUS", &POA_Control::MountVertexLLama::_get_EL_ENC_STATUS_skel, 0},
      {"_get_AZ_ENC_STATUS", &POA_Control::MountVertexLLama::_get_AZ_ENC_STATUS_skel, 0},
      {"_get_EL_MOTOR_TEMPS", &POA_Control::MountVertexLLama::_get_EL_MOTOR_TEMPS_skel, 0},
      {"_get_AZ_MOTOR_TEMPS", &POA_Control::MountVertexLLama::_get_AZ_MOTOR_TEMPS_skel, 0},
      {"_get_UPS_OUTPUT_VOLTS", &POA_Control::MountVertexLLama::_get_UPS_OUTPUT_VOLTS_skel, 0},
      {"_get_UPS_BYPASS_VOLTS", &POA_Control::MountVertexLLama::_get_UPS_BYPASS_VOLTS_skel, 0},
      {"_get_METR_EQUIP_STATUS", &POA_Control::MountVertexLLama::_get_METR_EQUIP_STATUS_skel, 0},
      {"_get_UPS2_OUTPUT_VOLTS", &POA_Control::MountVertexLLama::_get_UPS2_OUTPUT_VOLTS_skel, 0},
      {"_get_UPS2_BYPASS_VOLTS", &POA_Control::MountVertexLLama::_get_UPS2_BYPASS_VOLTS_skel, 0},
      {"_get_AZ_MOTOR_CURRENTS", &POA_Control::MountVertexLLama::_get_AZ_MOTOR_CURRENTS_skel, 0},
      {"_get_EL_MOTOR_CURRENTS", &POA_Control::MountVertexLLama::_get_EL_MOTOR_CURRENTS_skel, 0},
      {"_get_UPS_BATTERY_STATUS", &POA_Control::MountVertexLLama::_get_UPS_BATTERY_STATUS_skel, 0},
      {"_get_UPS_INVERTER_VOLTS", &POA_Control::MountVertexLLama::_get_UPS_INVERTER_VOLTS_skel, 0},
      {"_get_UPS2_BATTERY_STATUS", &POA_Control::MountVertexLLama::_get_UPS2_BATTERY_STATUS_skel, 0},
      {"_get_UPS2_INVERTER_VOLTS", &POA_Control::MountVertexLLama::_get_UPS2_INVERTER_VOLTS_skel, 0},
      {"hwConfigure", &POA_Control::MountVertexLLama::hwConfigure_skel, 0},
      {"hwInitialize", &POA_Control::MountVertexLLama::hwInitialize_skel, 0},
      {"SET_AZ_SERVO_COEFF_C", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_C_skel, 0},
      {"SET_EL_SERVO_COEFF_C", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_C_skel, 0},
      {"SET_PT_MODEL_COEFF_0C", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_0C_skel, 0},
      {"getSubreflectorPosition", &POA_Control::MountVertexLLama::getSubreflectorPosition_skel, 0},
      {"getSubreflectorRotation", &POA_Control::MountVertexLLama::getSubreflectorRotation_skel, 0},
      {"SET_AZ_SERVO_COEFF_7", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_7_skel, 0},
      {"SET_EL_SERVO_COEFF_7", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_7_skel, 0},
      {"SET_PT_MODEL_COEFF_07", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_07_skel, 0},
      {"getSubreflectorCommandedPosition", &POA_Control::MountVertexLLama::getSubreflectorCommandedPosition_skel, 0},
      {"getSubreflectorCommandedRotation", &POA_Control::MountVertexLLama::getSubreflectorCommandedRotation_skel, 0},
      {"SET_AZ_SERVO_COEFF_3", &POA_Control::MountVertexLLama::SET_AZ_SERVO_COEFF_3_skel, 0},
      {"SET_EL_SERVO_COEFF_3", &POA_Control::MountVertexLLama::SET_EL_SERVO_COEFF_3_skel, 0},
      {"SET_PT_MODEL_COEFF_03", &POA_Control::MountVertexLLama::SET_PT_MODEL_COEFF_03_skel, 0},
      {"_get_METR_DELTAPATH", &POA_Control::MountVertexLLama::_get_METR_DELTAPATH_skel, 0},
      {"_get_METR_TEMPS_09", &POA_Control::MountVertexLLama::_get_METR_TEMPS_09_skel, 0},
      {"_get_METR_TEMPS_19", &POA_Control::MountVertexLLama::_get_METR_TEMPS_19_skel, 0},
      {"_get_AZ_SERVO_COEFF_9", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_9_skel, 0},
      {"_get_EL_SERVO_COEFF_9", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_9_skel, 0},
      {"_get_PT_MODEL_COEFF_09", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_09_skel, 0},
      {"_get_METR_TEMPS_0A", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0A_skel, 0},
      {"_get_METR_TEMPS_1A", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1A_skel, 0},
      {"_get_AZ_SERVO_COEFF_A", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_A_skel, 0},
      {"_get_EL_SERVO_COEFF_A", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_A_skel, 0},
      {"_get_PT_MODEL_COEFF_0A", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0A_skel, 0},
      {"_get_METR_MODE", &POA_Control::MountVertexLLama::_get_METR_MODE_skel, 0},
      {"_get_AZ_AUX_MODE", &POA_Control::MountVertexLLama::_get_AZ_AUX_MODE_skel, 0},
      {"_get_EL_AUX_MODE", &POA_Control::MountVertexLLama::_get_EL_AUX_MODE_skel, 0},
      {"getSubdeviceList", &POA_Control::MountVertexLLama::getSubdeviceList_skel, 0},
      {"_get_METR_TEMPS_0E", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0E_skel, 0},
      {"_get_METR_TEMPS_1E", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1E_skel, 0},
      {"_get_IDLE_STOW_TIME", &POA_Control::MountVertexLLama::_get_IDLE_STOW_TIME_skel, 0},
      {"_get_EL_MOTOR_TORQUE", &POA_Control::MountVertexLLama::_get_EL_MOTOR_TORQUE_skel, 0},
      {"_get_AZ_MOTOR_TORQUE", &POA_Control::MountVertexLLama::_get_AZ_MOTOR_TORQUE_skel, 0},
      {"_get_AZ_SERVO_COEFF_E", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_E_skel, 0},
      {"_get_EL_SERVO_COEFF_E", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_E_skel, 0},
      {"_get_PT_MODEL_COEFF_0E", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0E_skel, 0},
      {"_get_SELFTEST_ERR_VALUE", &POA_Control::MountVertexLLama::_get_SELFTEST_ERR_VALUE_skel, 0},
      {"getFocusModelCoefficient", &POA_Control::MountVertexLLama::getFocusModelCoefficient_skel, 0},
      {"getPointingModelCoefficient", &POA_Control::MountVertexLLama::getPointingModelCoefficient_skel, 0},
      {"getSubreflectorPositionOffset", &POA_Control::MountVertexLLama::getSubreflectorPositionOffset_skel, 0},
      {"getSubreflectorRotationOffset", &POA_Control::MountVertexLLama::getSubreflectorRotationOffset_skel, 0},
      {"getAuxPointingModelCoefficient", &POA_Control::MountVertexLLama::getAuxPointingModelCoefficient_skel, 0},
      {"getSubreflectorPositionTruncatedOffset", &POA_Control::MountVertexLLama::getSubreflectorPositionTruncatedOffset_skel, 0},
      {"isSimulated", &POA_Control::MountVertexLLama::isSimulated_skel, 0},
      {"isShutterClosed", &POA_Control::MountVertexLLama::isShutterClosed_skel, 0},
      {"isFocusModelEnabled", &POA_Control::MountVertexLLama::isFocusModelEnabled_skel, 0},
      {"isPointingModelEnabled", &POA_Control::MountVertexLLama::isPointingModelEnabled_skel, 0},
      {"isCLOUDSATRegionAvoided", &POA_Control::MountVertexLLama::isCLOUDSATRegionAvoided_skel, 0},
      {"isAuxPointingModelEnabled", &POA_Control::MountVertexLLama::isAuxPointingModelEnabled_skel, 0},
      {"isFocusPointingModelEnabled", &POA_Control::MountVertexLLama::isFocusPointingModelEnabled_skel, 0},
      {"isMountStatusDataPublicationEnabled", &POA_Control::MountVertexLLama::isMountStatusDataPublicationEnabled_skel, 0},
      {"enableMountStatusDataPublication", &POA_Control::MountVertexLLama::enableMountStatusDataPublication_skel, 0},
      {"_get_METR_TEMPS_05", &POA_Control::MountVertexLLama::_get_METR_TEMPS_05_skel, 0},
      {"_get_METR_TEMPS_15", &POA_Control::MountVertexLLama::_get_METR_TEMPS_15_skel, 0},
      {"_get_AZ_SERVO_COEFF_5", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_5_skel, 0},
      {"_get_EL_SERVO_COEFF_5", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_5_skel, 0},
      {"_get_PT_MODEL_COEFF_05", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_05_skel, 0},
      {"_get_SUBREF_CORR_ROT", &POA_Control::MountVertexLLama::_get_SUBREF_CORR_ROT_skel, 0},
      {"_get_METR_DELTAS_TILT", &POA_Control::MountVertexLLama::_get_METR_DELTAS_TILT_skel, 0},
      {"_get_SUBREF_DELTA_ROT", &POA_Control::MountVertexLLama::_get_SUBREF_DELTA_ROT_skel, 0},
      {"_get_AZ_ENCODER_OFFSET", &POA_Control::MountVertexLLama::_get_AZ_ENCODER_OFFSET_skel, 0},
      {"_get_EL_ENCODER_OFFSET", &POA_Control::MountVertexLLama::_get_EL_ENCODER_OFFSET_skel, 0},
      {"_get_UPS_OUTPUT_CURRENT", &POA_Control::MountVertexLLama::_get_UPS_OUTPUT_CURRENT_skel, 0},
      {"_get_UPS_BATTERY_OUTPUT", &POA_Control::MountVertexLLama::_get_UPS_BATTERY_OUTPUT_skel, 0},
      {"_get_UPS2_BATTERY_OUTPUT", &POA_Control::MountVertexLLama::_get_UPS2_BATTERY_OUTPUT_skel, 0},
      {"_get_UPS2_OUTPUT_CURRENT", &POA_Control::MountVertexLLama::_get_UPS2_OUTPUT_CURRENT_skel, 0},
      {"_get_SELFTEST_RSP_ERROR_COUNT", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_ERROR_COUNT_skel, 0},
      {"_get_SELFTEST_RSP_FAILED_COUNT", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_FAILED_COUNT_skel, 0},
      {"_get_SELFTEST_ERR_FAILED_COUNT", &POA_Control::MountVertexLLama::_get_SELFTEST_ERR_FAILED_COUNT_skel, 0},
      {"RESET_ACU_CMD", &POA_Control::MountVertexLLama::RESET_ACU_CMD_skel, 0},
      {"_component", &POA_Control::MountVertexLLama::_component_skel, 0},
      {"getFocusModelBand", &POA_Control::MountVertexLLama::getFocusModelBand_skel, 0},
      {"timeToSource", &POA_Control::MountVertexLLama::timeToSource_skel, 0},
      {"_non_existent", &POA_Control::MountVertexLLama::_non_existent_skel, 0},
      {"getPointingModelBand", &POA_Control::MountVertexLLama::getPointingModelBand_skel, 0},
      {"getFocusModel", &POA_Control::MountVertexLLama::getFocusModel_skel, 0},
      {"getPointingModel", &POA_Control::MountVertexLLama::getPointingModel_skel, 0},
      {"getAuxPointingModel", &POA_Control::MountVertexLLama::getAuxPointingModel_skel, 0},
      {"_get_METR_TEMPS_0F", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0F_skel, 0},
      {"_get_METR_TEMPS_1F", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1F_skel, 0},
      {"_get_AZ_SERVO_COEFF_F", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_F_skel, 0},
      {"_get_EL_SERVO_COEFF_F", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_F_skel, 0},
      {"_get_PT_MODEL_COEFF_0F", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0F_skel, 0},
      {"_get_SYSTEM_ID", &POA_Control::MountVertexLLama::_get_SYSTEM_ID_skel, 0},
      {"getSensorTemperatureForFocusModel", &POA_Control::MountVertexLLama::getSensorTemperatureForFocusModel_skel, 0},
      {"_get_METR_TEMPS_0D", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0D_skel, 0},
      {"_get_METR_TEMPS_1D", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1D_skel, 0},
      {"_get_AZ_SERVO_COEFF_D", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_D_skel, 0},
      {"_get_EL_SERVO_COEFF_D", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_D_skel, 0},
      {"_get_PT_MODEL_COEFF_0D", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0D_skel, 0},
      {"_get_SELFTEST_RSP_FAILED", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_FAILED_skel, 0},
      {"_get_SELFTEST_RSP_COMPLETED", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_COMPLETED_skel, 0},
      {"_get_SW_REV_LEVEL", &POA_Control::MountVertexLLama::_get_SW_REV_LEVEL_skel, 0},
      {"_get_AZ_POSN_RSP", &POA_Control::MountVertexLLama::_get_AZ_POSN_RSP_skel, 0},
      {"_get_EL_POSN_RSP", &POA_Control::MountVertexLLama::_get_EL_POSN_RSP_skel, 0},
      {"_get_ACU_MODE_RSP", &POA_Control::MountVertexLLama::_get_ACU_MODE_RSP_skel, 0},
      {"_get_SELFTEST_RSP", &POA_Control::MountVertexLLama::_get_SELFTEST_RSP_skel, 0},
      {"_get_ACU_TRK_MODE_RSP", &POA_Control::MountVertexLLama::_get_ACU_TRK_MODE_RSP_skel, 0},
      {"_get_METR_DELTAS_DISP", &POA_Control::MountVertexLLama::_get_METR_DELTAS_DISP_skel, 0},
      {"_get_METR_DELTAS_TEMP", &POA_Control::MountVertexLLama::_get_METR_DELTAS_TEMP_skel, 0},
      {"_get_METR_DELTAS_TILTTEMP", &POA_Control::MountVertexLLama::_get_METR_DELTAS_TILTTEMP_skel, 0},
      {"isMonitoring", &POA_Control::MountVertexLLama::isMonitoring_skel, 0},
      {"_get_METR_TEMPS_08", &POA_Control::MountVertexLLama::_get_METR_TEMPS_08_skel, 0},
      {"_get_METR_TEMPS_18", &POA_Control::MountVertexLLama::_get_METR_TEMPS_18_skel, 0},
      {"_get_AZ_SERVO_COEFF_8", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_8_skel, 0},
      {"_get_EL_SERVO_COEFF_8", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_8_skel, 0},
      {"_get_PT_MODEL_COEFF_08", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_08_skel, 0},
      {"_repository_id", &POA_Control::MountVertexLLama::_repository_id_skel, 0},
      {"enableFocusModel", &POA_Control::MountVertexLLama::enableFocusModel_skel, 0},
      {"_get_antennaModel", &POA_Control::MountVertexLLama::_get_antennaModel_skel, 0},
      {"enablePointingModel", &POA_Control::MountVertexLLama::enablePointingModel_skel, 0},
      {"enableAuxPointingModel", &POA_Control::MountVertexLLama::enableAuxPointingModel_skel, 0},
      {"enableFocusPointingModel", &POA_Control::MountVertexLLama::enableFocusPointingModel_skel, 0},
      {"_get_METR_TILT_0", &POA_Control::MountVertexLLama::_get_METR_TILT_0_skel, 0},
      {"_get_METR_COEFF_0", &POA_Control::MountVertexLLama::_get_METR_COEFF_0_skel, 0},
      {"_get_METR_DISPL_0", &POA_Control::MountVertexLLama::_get_METR_DISPL_0_skel, 0},
      {"_get_METR_TEMPS_00", &POA_Control::MountVertexLLama::_get_METR_TEMPS_00_skel, 0},
      {"_get_METR_TEMPS_10", &POA_Control::MountVertexLLama::_get_METR_TEMPS_10_skel, 0},
      {"_get_STOW_PIN", &POA_Control::MountVertexLLama::_get_STOW_PIN_skel, 0},
      {"_get_AZ_SERVO_COEFF_0", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_0_skel, 0},
      {"_get_EL_SERVO_COEFF_0", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_0_skel, 0},
      {"_get_PT_MODEL_COEFF_00", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_00_skel, 0},
      {"_get_SUBREF_ABS_POSN", &POA_Control::MountVertexLLama::_get_SUBREF_ABS_POSN_skel, 0},
      {"_get_SUBREF_ROTATION", &POA_Control::MountVertexLLama::_get_SUBREF_ROTATION_skel, 0},
      {"_get_SUBREF_DELTA_POSN", &POA_Control::MountVertexLLama::_get_SUBREF_DELTA_POSN_skel, 0},
      {"getSubreflectorPositionToleranceXY", &POA_Control::MountVertexLLama::getSubreflectorPositionToleranceXY_skel, 0},
      {"isMoveable", &POA_Control::MountVertexLLama::isMoveable_skel, 0},
      {"inLocalMode", &POA_Control::MountVertexLLama::inLocalMode_skel, 0},
      {"inErrorState", &POA_Control::MountVertexLLama::inErrorState_skel, 0},
      {"inStandbyMode", &POA_Control::MountVertexLLama::inStandbyMode_skel, 0},
      {"inShutdownMode", &POA_Control::MountVertexLLama::inShutdownMode_skel, 0},
      {"_get_METR_TILT_1", &POA_Control::MountVertexLLama::_get_METR_TILT_1_skel, 0},
      {"_get_METR_COEFF_1", &POA_Control::MountVertexLLama::_get_METR_COEFF_1_skel, 0},
      {"_get_UPS_STATUS_1", &POA_Control::MountVertexLLama::_get_UPS_STATUS_1_skel, 0},
      {"_get_METR_DISPL_1", &POA_Control::MountVertexLLama::_get_METR_DISPL_1_skel, 0},
      {"_get_METR_TEMPS_01", &POA_Control::MountVertexLLama::_get_METR_TEMPS_01_skel, 0},
      {"_get_METR_TEMPS_11", &POA_Control::MountVertexLLama::_get_METR_TEMPS_11_skel, 0},
      {"_get_AZ_SERVO_COEFF_1", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_1_skel, 0},
      {"_get_EL_SERVO_COEFF_1", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_1_skel, 0},
      {"_get_PT_MODEL_COEFF_01", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_01_skel, 0},
      {"_get_METR_TEMPS_0B", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0B_skel, 0},
      {"_get_METR_TEMPS_1B", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1B_skel, 0},
      {"_get_AZ_SERVO_COEFF_B", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_B_skel, 0},
      {"_get_EL_SERVO_COEFF_B", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_B_skel, 0},
      {"_get_PT_MODEL_COEFF_0B", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0B_skel, 0},
      {"_get_METR_TEMPS_04", &POA_Control::MountVertexLLama::_get_METR_TEMPS_04_skel, 0},
      {"_get_METR_TEMPS_14", &POA_Control::MountVertexLLama::_get_METR_TEMPS_14_skel, 0},
      {"_get_AZ_SERVO_COEFF_4", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_4_skel, 0},
      {"_get_EL_SERVO_COEFF_4", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_4_skel, 0},
      {"_get_PT_MODEL_COEFF_04", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_04_skel, 0},
      {"getHwState", &POA_Control::MountVertexLLama::getHwState_skel, 0},
      {"getAxisMode", &POA_Control::MountVertexLLama::getAxisMode_skel, 0},
      {"getTolerance", &POA_Control::MountVertexLLama::getTolerance_skel, 0},
      {"getErrorMessage", &POA_Control::MountVertexLLama::getErrorMessage_skel, 0},
      {"getSubdeviceName", &POA_Control::MountVertexLLama::getSubdeviceName_skel, 0},
      {"_get_IP_GATEWAY", &POA_Control::MountVertexLLama::_get_IP_GATEWAY_skel, 0},
      {"getDeviceReferenceName", &POA_Control::MountVertexLLama::getDeviceReferenceName_skel, 0},
      {"getFocusModelTemperature", &POA_Control::MountVertexLLama::getFocusModelTemperature_skel, 0},
      {"get_characteristic_by_name", &POA_Control::MountVertexLLama::get_characteristic_by_name_skel, 0},
      {"getSubreflectorRotationTolerance", &POA_Control::MountVertexLLama::getSubreflectorRotationTolerance_skel, 0},
      {"_get_METR_TILT_2", &POA_Control::MountVertexLLama::_get_METR_TILT_2_skel, 0},
      {"_get_METR_DISPL_2", &POA_Control::MountVertexLLama::_get_METR_DISPL_2_skel, 0},
      {"_get_UPS_STATUS_2", &POA_Control::MountVertexLLama::_get_UPS_STATUS_2_skel, 0},
      {"_get_METR_TEMPS_02", &POA_Control::MountVertexLLama::_get_METR_TEMPS_02_skel, 0},
      {"_get_METR_TEMPS_12", &POA_Control::MountVertexLLama::_get_METR_TEMPS_12_skel, 0},
      {"_get_AZ_SERVO_COEFF_2", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_2_skel, 0},
      {"_get_EL_SERVO_COEFF_2", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_2_skel, 0},
      {"_get_PT_MODEL_COEFF_02", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_02_skel, 0},
      {"_get_SHUTTER", &POA_Control::MountVertexLLama::_get_SHUTTER_skel, 0},
      {"_get_CAN_ERROR", &POA_Control::MountVertexLLama::_get_CAN_ERROR_skel, 0},
      {"_get_SELFTEST_ERR", &POA_Control::MountVertexLLama::_get_SELFTEST_ERR_skel, 0},
      {"_get_name", &POA_Control::MountVertexLLama::_get_name_skel, 0},
      {"_interface", &POA_Control::MountVertexLLama::_interface_skel, 0},
      {"_get_componentState", &POA_Control::MountVertexLLama::_get_componentState_skel, 0},
      {"_get_AZ_ENC", &POA_Control::MountVertexLLama::_get_AZ_ENC_skel, 0},
      {"_get_EL_ENC", &POA_Control::MountVertexLLama::_get_EL_ENC_skel, 0},
      {"_get_METR_TEMPS_0C", &POA_Control::MountVertexLLama::_get_METR_TEMPS_0C_skel, 0},
      {"_get_METR_TEMPS_1C", &POA_Control::MountVertexLLama::_get_METR_TEMPS_1C_skel, 0},
      {"_get_AZ_SERVO_COEFF_C", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_C_skel, 0},
      {"_get_EL_SERVO_COEFF_C", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_C_skel, 0},
      {"_get_PT_MODEL_COEFF_0C", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_0C_skel, 0},
      {"_get_METR_TEMPS_07", &POA_Control::MountVertexLLama::_get_METR_TEMPS_07_skel, 0},
      {"_get_METR_TEMPS_17", &POA_Control::MountVertexLLama::_get_METR_TEMPS_17_skel, 0},
      {"_get_AZ_SERVO_COEFF_7", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_7_skel, 0},
      {"_get_EL_SERVO_COEFF_7", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_7_skel, 0},
      {"_get_PT_MODEL_COEFF_07", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_07_skel, 0},
      {"_get_METR_DISPL_3", &POA_Control::MountVertexLLama::_get_METR_DISPL_3_skel, 0},
      {"_get_METR_TEMPS_03", &POA_Control::MountVertexLLama::_get_METR_TEMPS_03_skel, 0},
      {"_get_METR_TEMPS_13", &POA_Control::MountVertexLLama::_get_METR_TEMPS_13_skel, 0},
      {"_get_AZ_SERVO_COEFF_3", &POA_Control::MountVertexLLama::_get_AZ_SERVO_COEFF_3_skel, 0},
      {"_get_EL_SERVO_COEFF_3", &POA_Control::MountVertexLLama::_get_EL_SERVO_COEFF_3_skel, 0},
      {"_get_PT_MODEL_COEFF_03", &POA_Control::MountVertexLLama::_get_PT_MODEL_COEFF_03_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
            {
              const TAO_operation_db_entry  *resword; 

              switch (key)
                {
                case     7:
                  resword = &wordlist[7]; break;
                case    13:
                  resword = &wordlist[8]; break;
                case    21:
                  resword = &wordlist[9]; break;
                case    22:
                  resword = &wordlist[10]; break;
                case    24:
                  resword = &wordlist[11]; break;
                case    26:
                  resword = &wordlist[12]; break;
                case    27:
                  resword = &wordlist[13];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[14];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    28:
                  resword = &wordlist[15]; break;
                case    29:
                  resword = &wordlist[16];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[17];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    31:
                  resword = &wordlist[18]; break;
                case    32:
                  resword = &wordlist[19];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[20];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    33:
                  resword = &wordlist[21]; break;
                case    34:
                  resword = &wordlist[22];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[23];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[24];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[25];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[26];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[27];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    36:
                  resword = &wordlist[28]; break;
                case    41:
                  resword = &wordlist[29];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[30];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    48:
                  resword = &wordlist[31]; break;
                case    49:
                  resword = &wordlist[32]; break;
                case    51:
                  resword = &wordlist[33]; break;
                case    52:
                  resword = &wordlist[34]; break;
                case    53:
                  resword = &wordlist[35];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[36];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    55:
                  resword = &wordlist[37]; break;
                case    56:
                  resword = &wordlist[38];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[39];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    58:
                  resword = &wordlist[40]; break;
                case    59:
                  resword = &wordlist[41]; break;
                case    63:
                  resword = &wordlist[42];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[43];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    65:
                  resword = &wordlist[44]; break;
                case    66:
                  resword = &wordlist[45];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[46];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    67:
                  resword = &wordlist[47]; break;
                case    68:
                  resword = &wordlist[48];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[49];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[50];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[51];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[52];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    69:
                  resword = &wordlist[53];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[54];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[55];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[56];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    70:
                  resword = &wordlist[57];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[58];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[59];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[60];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    71:
                  resword = &wordlist[61];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[62];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[63];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[64];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    72:
                  resword = &wordlist[65];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[66];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[67];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[68];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[69];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[70];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    73:
                  resword = &wordlist[71];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[72];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    75:
                  resword = &wordlist[73];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[74];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    76:
                  resword = &wordlist[75];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[76];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[77];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[78];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[79];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    77:
                  resword = &wordlist[80];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[81];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    78:
                  resword = &wordlist[82];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[83];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    79:
                  resword = &wordlist[84];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[85];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    80:
                  resword = &wordlist[86];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[87];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    81:
                  resword = &wordlist[88];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[89];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[90];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[91];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[92];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    82:
                  resword = &wordlist[93];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[94];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    83:
                  resword = &wordlist[95];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[96];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[97];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[98];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    84:
                  resword = &wordlist[99];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[100];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[101];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[102];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    85:
                  resword = &wordlist[103]; break;
                case    86:
                  resword = &wordlist[104];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[105];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[106];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    87:
                  resword = &wordlist[107]; break;
                case    88:
                  resword = &wordlist[108]; break;
                case    90:
                  resword = &wordlist[109]; break;
                case    91:
                  resword = &wordlist[110];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[111];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case    96:
                  resword = &wordlist[112]; break;
                case    97:
                  resword = &wordlist[113]; break;
                case    98:
                  resword = &wordlist[114]; break;
                case   101:
                  resword = &wordlist[115]; break;
                case   102:
                  resword = &wordlist[116]; break;
                case   105:
                  resword = &wordlist[117]; break;
                case   108:
                  resword = &wordlist[118]; break;
                case   109:
                  resword = &wordlist[119]; break;
                case   110:
                  resword = &wordlist[120];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[121];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   113:
                  resword = &wordlist[122];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[123];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   114:
                  resword = &wordlist[124]; break;
                case   116:
                  resword = &wordlist[125];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[126];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   117:
                  resword = &wordlist[127]; break;
                case   119:
                  resword = &wordlist[128];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[129];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   120:
                  resword = &wordlist[130]; break;
                case   121:
                  resword = &wordlist[131];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[132];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   122:
                  resword = &wordlist[133]; break;
                case   123:
                  resword = &wordlist[134];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[135];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   124:
                  resword = &wordlist[136]; break;
                case   125:
                  resword = &wordlist[137]; break;
                case   126:
                  resword = &wordlist[138];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[139];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[140];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   127:
                  resword = &wordlist[141]; break;
                case   128:
                  resword = &wordlist[142];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[143];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[144];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   129:
                  resword = &wordlist[145];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[146];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   130:
                  resword = &wordlist[147];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[148];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[149];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[150];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   131:
                  resword = &wordlist[151];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[152];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[153];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[154];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[155];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   132:
                  resword = &wordlist[156]; break;
                case   133:
                  resword = &wordlist[157];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[158];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[159];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[160];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[161];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[162];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[163];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[164];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[165];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   134:
                  resword = &wordlist[166];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[167];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[168];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[169];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   136:
                  resword = &wordlist[170]; break;
                case   137:
                  resword = &wordlist[171];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[172];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[173];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[174];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[175];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[176];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   138:
                  resword = &wordlist[177]; break;
                case   139:
                  resword = &wordlist[178];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[179];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[180];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   141:
                  resword = &wordlist[181];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[182];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[183];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[184];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[185];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[186];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[187];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   142:
                  resword = &wordlist[188];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[189];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[190];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   143:
                  resword = &wordlist[191];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[192];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[193];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[194];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[195];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[196];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   144:
                  resword = &wordlist[197];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[198];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   145:
                  resword = &wordlist[199]; break;
                case   146:
                  resword = &wordlist[200]; break;
                case   148:
                  resword = &wordlist[201];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[202];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[203];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   149:
                  resword = &wordlist[204]; break;
                case   150:
                  resword = &wordlist[205];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[206];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   151:
                  resword = &wordlist[207]; break;
                case   152:
                  resword = &wordlist[208]; break;
                case   154:
                  resword = &wordlist[209]; break;
                case   156:
                  resword = &wordlist[210]; break;
                case   162:
                  resword = &wordlist[211]; break;
                case   165:
                  resword = &wordlist[212]; break;
                case   167:
                  resword = &wordlist[213]; break;
                case   168:
                  resword = &wordlist[214];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[215];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   169:
                  resword = &wordlist[216]; break;
                case   171:
                  resword = &wordlist[217];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[218];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   174:
                  resword = &wordlist[219];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[220];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   175:
                  resword = &wordlist[221]; break;
                case   177:
                  resword = &wordlist[222]; break;
                case   178:
                  resword = &wordlist[223];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[224];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   179:
                  resword = &wordlist[225]; break;
                case   180:
                  resword = &wordlist[226];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[227];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   183:
                  resword = &wordlist[228];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[229];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   184:
                  resword = &wordlist[230];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[231];
                  return *str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1) ? resword : 0;
                case   186:
                  resword = &wordlist[232];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[233];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   187:
                  resword = &wordlist[234]; break;
                case   189:
                  resword = &wordlist[235]; break;
                case   190:
                  resword = &wordlist[236];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[237];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[238];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   191:
                  resword = &wordlist[239];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[240];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   192:
                  resword = &wordlist[241];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[242];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[243];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[244];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   193:
                  resword = &wordlist[245];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[246];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[247];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   194:
                  resword = &wordlist[248]; break;
                case   195:
                  resword = &wordlist[249]; break;
                case   196:
                  resword = &wordlist[250];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[251];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[252];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   197:
                  resword = &wordlist[253];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[254];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[255];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[256];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[257];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[258];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[259];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[260];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[261];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[262];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[263];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[264];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[265];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   198:
                  resword = &wordlist[266];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[267];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[268];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[269];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[270];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[271];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[272];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[273];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[274];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   199:
                  resword = &wordlist[275];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[276];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   200:
                  resword = &wordlist[277]; break;
                case   203:
                  resword = &wordlist[278]; break;
                case   204:
                  resword = &wordlist[279];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[280];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[281];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[282];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[283];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[284];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   205:
                  resword = &wordlist[285]; break;
                case   207:
                  resword = &wordlist[286]; break;
                case   208:
                  resword = &wordlist[287];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[288];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   209:
                  resword = &wordlist[289]; break;
                case   210:
                  resword = &wordlist[290];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[291];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   212:
                  resword = &wordlist[292]; break;
                case   219:
                  resword = &wordlist[293]; break;
                case   222:
                  resword = &wordlist[294]; break;
                case   224:
                  resword = &wordlist[295];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[296];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   225:
                  resword = &wordlist[297]; break;
                case   228:
                  resword = &wordlist[298];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[299];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   230:
                  resword = &wordlist[300]; break;
                case   231:
                  resword = &wordlist[301];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[302];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   232:
                  resword = &wordlist[303]; break;
                case   233:
                  resword = &wordlist[304]; break;
                case   235:
                  resword = &wordlist[305]; break;
                case   237:
                  resword = &wordlist[306];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[307];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   238:
                  resword = &wordlist[308];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[309];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   239:
                  resword = &wordlist[310]; break;
                case   240:
                  resword = &wordlist[311];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[312];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[313];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[314];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   241:
                  resword = &wordlist[315]; break;
                case   242:
                  resword = &wordlist[316]; break;
                case   243:
                  resword = &wordlist[317];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[318];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   244:
                  resword = &wordlist[319];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[320];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   245:
                  resword = &wordlist[321];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[322];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[323];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   246:
                  resword = &wordlist[324];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[325];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   249:
                  resword = &wordlist[326]; break;
                case   250:
                  resword = &wordlist[327]; break;
                case   252:
                  resword = &wordlist[328];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[329];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[330];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[331];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[332];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[333];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[334];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   253:
                  resword = &wordlist[335];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[336];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   254:
                  resword = &wordlist[337]; break;
                case   255:
                  resword = &wordlist[338];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[339];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   256:
                  resword = &wordlist[340]; break;
                case   257:
                  resword = &wordlist[341]; break;
                case   258:
                  resword = &wordlist[342]; break;
                case   259:
                  resword = &wordlist[343]; break;
                case   265:
                  resword = &wordlist[344];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[345];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[346];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[347];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   266:
                  resword = &wordlist[348];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[349];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   267:
                  resword = &wordlist[350];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[351];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   268:
                  resword = &wordlist[352];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[353];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   270:
                  resword = &wordlist[354];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[355];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[356];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   271:
                  resword = &wordlist[357]; break;
                case   272:
                  resword = &wordlist[358]; break;
                case   274:
                  resword = &wordlist[359];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[360];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[361];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[362];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[363];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[364];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[365];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   275:
                  resword = &wordlist[366];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[367];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[368];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   278:
                  resword = &wordlist[369]; break;
                case   279:
                  resword = &wordlist[370]; break;
                case   280:
                  resword = &wordlist[371];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[372];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   283:
                  resword = &wordlist[373];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[374];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   284:
                  resword = &wordlist[375]; break;
                case   285:
                  resword = &wordlist[376];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[377];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[378];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[379];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[380];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[381];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   286:
                  resword = &wordlist[382];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[383];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   287:
                  resword = &wordlist[384]; break;
                case   288:
                  resword = &wordlist[385];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[386];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   289:
                  resword = &wordlist[387]; break;
                case   290:
                  resword = &wordlist[388];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[389];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   291:
                  resword = &wordlist[390]; break;
                case   292:
                  resword = &wordlist[391]; break;
                case   293:
                  resword = &wordlist[392]; break;
                case   294:
                  resword = &wordlist[393];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[394];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   295:
                  resword = &wordlist[395];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[396];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   296:
                  resword = &wordlist[397]; break;
                case   298:
                  resword = &wordlist[398]; break;
                case   300:
                  resword = &wordlist[399]; break;
                case   301:
                  resword = &wordlist[400]; break;
                case   303:
                  resword = &wordlist[401]; break;
                case   304:
                  resword = &wordlist[402]; break;
                case   305:
                  resword = &wordlist[403]; break;
                case   307:
                  resword = &wordlist[404]; break;
                case   311:
                  resword = &wordlist[405];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[406];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   312:
                  resword = &wordlist[407]; break;
                case   314:
                  resword = &wordlist[408];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[409];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   315:
                  resword = &wordlist[410]; break;
                case   321:
                  resword = &wordlist[411]; break;
                case   322:
                  resword = &wordlist[412]; break;
                case   323:
                  resword = &wordlist[413]; break;
                case   324:
                  resword = &wordlist[414];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[415];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   325:
                  resword = &wordlist[416];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[417];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   327:
                  resword = &wordlist[418]; break;
                case   328:
                  resword = &wordlist[419];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[420];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   329:
                  resword = &wordlist[421]; break;
                case   332:
                  resword = &wordlist[422]; break;
                case   334:
                  resword = &wordlist[423];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[424];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   335:
                  resword = &wordlist[425]; break;
                case   336:
                  resword = &wordlist[426];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[427];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   337:
                  resword = &wordlist[428];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[429];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   338:
                  resword = &wordlist[430];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[431];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   339:
                  resword = &wordlist[432];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[433];
                  return *str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1) ? resword : 0;
                case   340:
                  resword = &wordlist[434];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[435];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[436];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   342:
                  resword = &wordlist[437]; break;
                case   343:
                  resword = &wordlist[438]; break;
                case   344:
                  resword = &wordlist[439];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[440];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   345:
                  resword = &wordlist[441]; break;
                case   348:
                  resword = &wordlist[442]; break;
                case   349:
                  resword = &wordlist[443]; break;
                case   350:
                  resword = &wordlist[444]; break;
                case   352:
                  resword = &wordlist[445]; break;
                case   354:
                  resword = &wordlist[446]; break;
                case   355:
                  resword = &wordlist[447]; break;
                case   368:
                  resword = &wordlist[448]; break;
                case   375:
                  resword = &wordlist[449]; break;
                case   376:
                  resword = &wordlist[450];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[451];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[452];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   377:
                  resword = &wordlist[453];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[454];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   379:
                  resword = &wordlist[455]; break;
                case   380:
                  resword = &wordlist[456];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[457];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   381:
                  resword = &wordlist[458]; break;
                case   382:
                  resword = &wordlist[459]; break;
                case   383:
                  resword = &wordlist[460];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[461];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   384:
                  resword = &wordlist[462]; break;
                case   385:
                  resword = &wordlist[463]; break;
                case   386:
                  resword = &wordlist[464];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[465];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   388:
                  resword = &wordlist[466];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[467];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   389:
                  resword = &wordlist[468];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[469];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   390:
                  resword = &wordlist[470];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[471];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   391:
                  resword = &wordlist[472]; break;
                case   393:
                  resword = &wordlist[473];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[474];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   394:
                  resword = &wordlist[475]; break;
                case   397:
                  resword = &wordlist[476];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[477];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   399:
                  resword = &wordlist[478]; break;
                case   400:
                  resword = &wordlist[479];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[480];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   401:
                  resword = &wordlist[481]; break;
                case   402:
                  resword = &wordlist[482]; break;
                case   404:
                  resword = &wordlist[483]; break;
                case   405:
                  resword = &wordlist[484]; break;
                case   406:
                  resword = &wordlist[485]; break;
                case   408:
                  resword = &wordlist[486]; break;
                case   409:
                  resword = &wordlist[487]; break;
                case   410:
                  resword = &wordlist[488]; break;
                case   411:
                  resword = &wordlist[489]; break;
                case   413:
                  resword = &wordlist[490]; break;
                case   414:
                  resword = &wordlist[491]; break;
                case   416:
                  resword = &wordlist[492]; break;
                case   418:
                  resword = &wordlist[493]; break;
                case   419:
                  resword = &wordlist[494]; break;
                case   420:
                  resword = &wordlist[495]; break;
                case   421:
                  resword = &wordlist[496]; break;
                case   422:
                  resword = &wordlist[497]; break;
                case   424:
                  resword = &wordlist[498]; break;
                case   425:
                  resword = &wordlist[499]; break;
                case   428:
                  resword = &wordlist[500]; break;
                case   430:
                  resword = &wordlist[501]; break;
                case   431:
                  resword = &wordlist[502]; break;
                case   433:
                  resword = &wordlist[503]; break;
                case   435:
                  resword = &wordlist[504];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[505];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   436:
                  resword = &wordlist[506]; break;
                case   439:
                  resword = &wordlist[507]; break;
                case   440:
                  resword = &wordlist[508]; break;
                case   441:
                  resword = &wordlist[509];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[510];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   442:
                  resword = &wordlist[511];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[512];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   443:
                  resword = &wordlist[513]; break;
                case   445:
                  resword = &wordlist[514];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[515];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   446:
                  resword = &wordlist[516]; break;
                case   448:
                  resword = &wordlist[517];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[518];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   449:
                  resword = &wordlist[519]; break;
                case   450:
                  resword = &wordlist[520]; break;
                case   451:
                  resword = &wordlist[521];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[522];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   453:
                  resword = &wordlist[523];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[524];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   454:
                  resword = &wordlist[525]; break;
                case   455:
                  resword = &wordlist[526];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[527];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   456:
                  resword = &wordlist[528]; break;
                case   457:
                  resword = &wordlist[529]; break;
                case   458:
                  resword = &wordlist[530]; break;
                case   459:
                  resword = &wordlist[531]; break;
                case   461:
                  resword = &wordlist[532];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[533];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   464:
                  resword = &wordlist[534]; break;
                case   466:
                  resword = &wordlist[535]; break;
                case   467:
                  resword = &wordlist[536]; break;
                case   469:
                  resword = &wordlist[537]; break;
                case   472:
                  resword = &wordlist[538]; break;
                case   473:
                  resword = &wordlist[539]; break;
                case   483:
                  resword = &wordlist[540]; break;
                case   484:
                  resword = &wordlist[541]; break;
                case   485:
                  resword = &wordlist[542];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[543];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[544];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[545];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[546];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   486:
                  resword = &wordlist[547];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[548];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   488:
                  resword = &wordlist[549]; break;
                case   489:
                  resword = &wordlist[550]; break;
                case   490:
                  resword = &wordlist[551]; break;
                case   491:
                  resword = &wordlist[552];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[553];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   492:
                  resword = &wordlist[554]; break;
                case   495:
                  resword = &wordlist[555]; break;
                case   496:
                  resword = &wordlist[556]; break;
                case   498:
                  resword = &wordlist[557];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[558];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   500:
                  resword = &wordlist[559];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[560];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   501:
                  resword = &wordlist[561]; break;
                case   502:
                  resword = &wordlist[562]; break;
                case   503:
                  resword = &wordlist[563]; break;
                case   505:
                  resword = &wordlist[564];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[565];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   508:
                  resword = &wordlist[566];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[567];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   509:
                  resword = &wordlist[568]; break;
                case   510:
                  resword = &wordlist[569]; break;
                case   511:
                  resword = &wordlist[570]; break;
                case   512:
                  resword = &wordlist[571];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[572];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   514:
                  resword = &wordlist[573]; break;
                case   515:
                  resword = &wordlist[574];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[575];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   516:
                  resword = &wordlist[576]; break;
                case   517:
                  resword = &wordlist[577]; break;
                case   519:
                  resword = &wordlist[578]; break;
                case   520:
                  resword = &wordlist[579]; break;
                case   521:
                  resword = &wordlist[580]; break;
                case   522:
                  resword = &wordlist[581];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[582];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   525:
                  resword = &wordlist[583];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[584];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   526:
                  resword = &wordlist[585]; break;
                case   528:
                  resword = &wordlist[586]; break;
                case   530:
                  resword = &wordlist[587]; break;
                case   531:
                  resword = &wordlist[588];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[589];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   532:
                  resword = &wordlist[590];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[591];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   533:
                  resword = &wordlist[592];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[593];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   535:
                  resword = &wordlist[594];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[595];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   537:
                  resword = &wordlist[596]; break;
                case   539:
                  resword = &wordlist[597]; break;
                case   542:
                  resword = &wordlist[598];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[599];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   544:
                  resword = &wordlist[600]; break;
                case   545:
                  resword = &wordlist[601];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[602];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   546:
                  resword = &wordlist[603]; break;
                case   547:
                  resword = &wordlist[604];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[605];
                  return *str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1) ? resword : 0;
                case   548:
                  resword = &wordlist[610];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[611];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[612];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[613];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   549:
                  resword = &wordlist[614];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[615];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[614];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[616];
                  return *str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1) ? resword : 0;
                case   550:
                  resword = &wordlist[617];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[618];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   551:
                  resword = &wordlist[619];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[620];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[621];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[622];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[623];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[624];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   552:
                  resword = &wordlist[625];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[626];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   554:
                  resword = &wordlist[627];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[628];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   555:
                  resword = &wordlist[629];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[630];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[631];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[632];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[633];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   556:
                  resword = &wordlist[634];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[635];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   557:
                  resword = &wordlist[636];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[637];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   559:
                  resword = &wordlist[638]; break;
                case   560:
                  resword = &wordlist[639]; break;
                case   563:
                  resword = &wordlist[640];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[641];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   564:
                  resword = &wordlist[642]; break;
                case   566:
                  resword = &wordlist[643];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[644];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   570:
                  resword = &wordlist[645];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[646];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   571:
                  resword = &wordlist[647]; break;
                case   575:
                  resword = &wordlist[648];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[649];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   580:
                  resword = &wordlist[650];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[651];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   581:
                  resword = &wordlist[652]; break;
                case   587:
                  resword = &wordlist[653]; break;
                case   589:
                  resword = &wordlist[654];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[655];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   592:
                  resword = &wordlist[656];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[657];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   593:
                  resword = &wordlist[658]; break;
                case   595:
                  resword = &wordlist[659];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[660];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   598:
                  resword = &wordlist[661];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[662];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   599:
                  resword = &wordlist[663]; break;
                case   603:
                  resword = &wordlist[664]; break;
                case   605:
                  resword = &wordlist[665];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[666];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   606:
                  resword = &wordlist[667]; break;
                case   607:
                  resword = &wordlist[668];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[669];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   608:
                  resword = &wordlist[670]; break;
                case   609:
                  resword = &wordlist[671];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[672];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   610:
                  resword = &wordlist[673];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[674];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   611:
                  resword = &wordlist[675]; break;
                case   612:
                  resword = &wordlist[676]; break;
                case   614:
                  resword = &wordlist[677]; break;
                case   617:
                  resword = &wordlist[678]; break;
                case   619:
                  resword = &wordlist[679];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[680];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   620:
                  resword = &wordlist[681]; break;
                case   628:
                  resword = &wordlist[682]; break;
                case   633:
                  resword = &wordlist[683]; break;
                case   637:
                  resword = &wordlist[684]; break;
                case   641:
                  resword = &wordlist[685]; break;
                case   644:
                  resword = &wordlist[686]; break;
                case   645:
                  resword = &wordlist[687]; break;
                case   647:
                  resword = &wordlist[688]; break;
                case   649:
                  resword = &wordlist[689]; break;
                case   657:
                  resword = &wordlist[690]; break;
                case   658:
                  resword = &wordlist[691]; break;
                case   659:
                  resword = &wordlist[692];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[693];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   662:
                  resword = &wordlist[694];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[695];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   663:
                  resword = &wordlist[696]; break;
                case   668:
                  resword = &wordlist[697]; break;
                case   669:
                  resword = &wordlist[698];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[699];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   670:
                  resword = &wordlist[700];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[701];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   671:
                  resword = &wordlist[702];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[703];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   672:
                  resword = &wordlist[704];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[705];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   677:
                  resword = &wordlist[706]; break;
                case   678:
                  resword = &wordlist[707];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[708];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   681:
                  resword = &wordlist[709]; break;
                case   683:
                  resword = &wordlist[710]; break;
                case   684:
                  resword = &wordlist[711]; break;
                case   685:
                  resword = &wordlist[712]; break;
                case   686:
                  resword = &wordlist[713]; break;
                case   687:
                  resword = &wordlist[714]; break;
                case   693:
                  resword = &wordlist[715]; break;
                case   696:
                  resword = &wordlist[716]; break;
                case   699:
                  resword = &wordlist[717]; break;
                case   707:
                  resword = &wordlist[718];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[719];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   710:
                  resword = &wordlist[720];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[721];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   711:
                  resword = &wordlist[722]; break;
                case   712:
                  resword = &wordlist[723]; break;
                case   713:
                  resword = &wordlist[724]; break;
                case   716:
                  resword = &wordlist[725];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[726];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   719:
                  resword = &wordlist[727];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[728];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   720:
                  resword = &wordlist[729]; break;
                case   722:
                  resword = &wordlist[730]; break;
                case   725:
                  resword = &wordlist[731]; break;
                case   735:
                  resword = &wordlist[732]; break;
                case   744:
                  resword = &wordlist[733];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[734];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   745:
                  resword = &wordlist[735];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[736];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   749:
                  resword = &wordlist[737];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[738];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[739];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   753:
                  resword = &wordlist[740]; break;
                case   757:
                  resword = &wordlist[741]; break;
                case   759:
                  resword = &wordlist[742];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[743];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   762:
                  resword = &wordlist[744];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[745];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   763:
                  resword = &wordlist[746]; break;
                case   764:
                  resword = &wordlist[747]; break;
                case   779:
                  resword = &wordlist[748]; break;
                case   780:
                  resword = &wordlist[749]; break;
                case   782:
                  resword = &wordlist[750]; break;
                case   785:
                  resword = &wordlist[751]; break;
                case   787:
                  resword = &wordlist[752]; break;
                case   802:
                  resword = &wordlist[753]; break;
                case   803:
                  resword = &wordlist[754];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[755];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   804:
                  resword = &wordlist[756];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[757];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   806:
                  resword = &wordlist[758]; break;
                case   807:
                  resword = &wordlist[759];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[760];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   808:
                  resword = &wordlist[761]; break;
                case   813:
                  resword = &wordlist[762];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[763];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   815:
                  resword = &wordlist[764]; break;
                case   828:
                  resword = &wordlist[765]; break;
                case   838:
                  resword = &wordlist[766]; break;
                case   839:
                  resword = &wordlist[767]; break;
                case   840:
                  resword = &wordlist[768]; break;
                case   841:
                  resword = &wordlist[769]; break;
                case   842:
                  resword = &wordlist[770]; break;
                case   854:
                  resword = &wordlist[771]; break;
                case   855:
                  resword = &wordlist[772];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[773];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[774];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   856:
                  resword = &wordlist[775];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[776];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   859:
                  resword = &wordlist[777];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[778];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   860:
                  resword = &wordlist[779]; break;
                case   869:
                  resword = &wordlist[780];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[781];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   872:
                  resword = &wordlist[782];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[783];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   873:
                  resword = &wordlist[784]; break;
                case   876:
                  resword = &wordlist[785];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[786];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   879:
                  resword = &wordlist[787];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[788];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   880:
                  resword = &wordlist[789]; break;
                case   883:
                  resword = &wordlist[790]; break;
                case   884:
                  resword = &wordlist[791]; break;
                case   885:
                  resword = &wordlist[792]; break;
                case   888:
                  resword = &wordlist[793]; break;
                case   889:
                  resword = &wordlist[794]; break;
                case   892:
                  resword = &wordlist[795]; break;
                case   895:
                  resword = &wordlist[796]; break;
                case   897:
                  resword = &wordlist[797]; break;
                case   899:
                  resword = &wordlist[798]; break;
                case   905:
                  resword = &wordlist[799]; break;
                case   919:
                  resword = &wordlist[800]; break;
                case   920:
                  resword = &wordlist[801];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[802];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   921:
                  resword = &wordlist[803];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[804];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   924:
                  resword = &wordlist[805];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[806];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   925:
                  resword = &wordlist[807]; break;
                case   938:
                  resword = &wordlist[808]; break;
                case   940:
                  resword = &wordlist[809]; break;
                case   943:
                  resword = &wordlist[810]; break;
                case   965:
                  resword = &wordlist[811]; break;
                case   966:
                  resword = &wordlist[812]; break;
                case   975:
                  resword = &wordlist[813]; break;
                case   977:
                  resword = &wordlist[814];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[815];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   984:
                  resword = &wordlist[816];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[817];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   987:
                  resword = &wordlist[818];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[819];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   988:
                  resword = &wordlist[820]; break;
                case   991:
                  resword = &wordlist[821];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[822];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   994:
                  resword = &wordlist[823];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[824];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case   995:
                  resword = &wordlist[825]; break;
                case  1000:
                  resword = &wordlist[826]; break;
                case  1001:
                  resword = &wordlist[827];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[828];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  1004:
                  resword = &wordlist[829];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[830];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  1005:
                  resword = &wordlist[831]; break;
                default: return 0;
                }
              if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1))
                return resword;
              return 0;
            }
        }
    }
  return 0;
}

static TAO_Control_MountVertexLLama_Perfect_Hash_OpTable tao_Control_MountVertexLLama_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:968

TAO::Collocation_Proxy_Broker *
Control__TAO_MountVertexLLama_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
Control__TAO_MountVertexLLama_Proxy_Broker_Factory_Initializer (size_t)
{
  Control__TAO_MountVertexLLama_Proxy_Broker_Factory_function_pointer = 
    Control__TAO_MountVertexLLama_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
Control__TAO_MountVertexLLama_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  Control__TAO_MountVertexLLama_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (Control__TAO_MountVertexLLama_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:93

POA_Control::MountVertexLLama::MountVertexLLama (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Control_MountVertexLLama_optable;
}

POA_Control::MountVertexLLama::MountVertexLLama (const MountVertexLLama& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ACS::ACSComponent (rhs),
    POA_ACS::CharacteristicModel (rhs),
    POA_ACS::CharacteristicComponent (rhs),
    POA_Control::ControlDevice (rhs),
    POA_Control::HardwareDevice (rhs),
    POA_Control::MountBase (rhs),
    POA_Control::Mount (rhs),
    POA_Control::MountVertexBase (rhs),
    POA_Control::MountVertex (rhs),
    POA_Control::MountVertexLLamaBase (rhs)
{
}

POA_Control::MountVertexLLama::~MountVertexLLama (void)
{
}


// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:159


namespace POA_Control
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81
  
  class _is_a_MountVertexLLama_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_MountVertexLLama_Upcall_Command (
      POA_Control::MountVertexLLama * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_Control::MountVertexLLama * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Control::MountVertexLLama::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_Control::MountVertexLLama * const impl =
    static_cast<POA_Control::MountVertexLLama *> (servant);
  
  _is_a_MountVertexLLama_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Control
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81
  
  class _non_existent_MountVertexLLama_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_MountVertexLLama_Upcall_Command (
      POA_Control::MountVertexLLama * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_Control::MountVertexLLama * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Control::MountVertexLLama::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Control::MountVertexLLama * const impl =
    static_cast<POA_Control::MountVertexLLama *> (servant);
  
  _non_existent_MountVertexLLama_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_Control
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81
  
  class _repository_id_MountVertexLLama_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_MountVertexLLama_Upcall_Command (
      POA_Control::MountVertexLLama * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_Control::MountVertexLLama * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Control::MountVertexLLama::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Control::MountVertexLLama * const impl =
    static_cast<POA_Control::MountVertexLLama *> (servant);
  
  _repository_id_MountVertexLLama_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:502

void POA_Control::MountVertexLLama::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_Control::MountVertexLLama * const impl =
    static_cast<POA_Control::MountVertexLLama *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_Control
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81
  
  class _get_component_MountVertexLLama_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_MountVertexLLama_Upcall_Command (
      POA_Control::MountVertexLLama * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_Control::MountVertexLLama * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Control::MountVertexLLama::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Control::MountVertexLLama * const impl =
    static_cast<POA_Control::MountVertexLLama *> (servant);
  
  _get_component_MountVertexLLama_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_Control::MountVertexLLama::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/ACSComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/ControlDevice:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/HardwareDevice:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/MountBase:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/Mount:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/MountVertexBase:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/MountVertex:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/MountVertexLLamaBase:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Control/MountVertexLLama:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Control::MountVertexLLama::_interface_repository_id (void) const
{
  return "IDL:alma/Control/MountVertexLLama:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:910

void POA_Control::MountVertexLLama::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:836

Control::MountVertexLLama *
POA_Control::MountVertexLLama::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::Control::MountVertexLLama STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Control__TAO_MountVertexLLama_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

